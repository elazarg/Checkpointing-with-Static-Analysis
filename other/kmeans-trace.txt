[]
0 :
	0.0                   Instruction(opname='RESUME', opcode=151, arg=0, argval=0, argrepr='', offset=0, starts_line=7, is_jump_target=False, positions=Positions(lineno=7, end_lineno=7, col_offset=0, end_col_offset=0))
	0.1                   Instruction(opname='LOAD_FAST', opcode=124, arg=0, argval='X', argrepr='X', offset=2, starts_line=19, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=16, end_col_offset=17))
	0.2                   Instruction(opname='LOAD_GLOBAL', opcode=116, arg=0, argval='np', argrepr='np', offset=4, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=18, end_col_offset=20))
	0.3                   Instruction(opname='LOAD_ATTR', opcode=106, arg=2, argval='random', argrepr='random', offset=14, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=18, end_col_offset=27))
	0.4                   Instruction(opname='LOAD_ATTR', opcode=106, arg=5, argval='choice', argrepr='NULL|self + choice', offset=34, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=18, end_col_offset=34))
	0.5                   Instruction(opname='LOAD_FAST', opcode=124, arg=0, argval='X', argrepr='X', offset=54, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=35, end_col_offset=36))
	0.6                   Instruction(opname='LOAD_ATTR', opcode=106, arg=6, argval='shape', argrepr='shape', offset=56, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=35, end_col_offset=42))
	0.7                   Instruction(opname='LOAD_CONST', opcode=100, arg=1, argval=0, argrepr='0', offset=76, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=43, end_col_offset=44))
	0.8                   Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=78, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=35, end_col_offset=45))
	0.9                   Instruction(opname='LOAD_FAST', opcode=124, arg=1, argval='k', argrepr='k', offset=82, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=47, end_col_offset=48))
	0.10                  Instruction(opname='CALL', opcode=171, arg=2, argval=2, argrepr='', offset=84, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=18, end_col_offset=49))
	0.11                  Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=92, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=16, end_col_offset=50))
	0.12                  Instruction(opname='STORE_FAST', opcode=125, arg=3, argval='centroids', argrepr='centroids', offset=96, starts_line=None, is_jump_target=False, positions=Positions(lineno=19, end_lineno=19, col_offset=4, end_col_offset=13))
	0.13                  Instruction(opname='LOAD_GLOBAL', opcode=116, arg=9, argval='list', argrepr='NULL + list', offset=98, starts_line=20, is_jump_target=False, positions=Positions(lineno=20, end_lineno=20, col_offset=15, end_col_offset=19))
	0.14                  Instruction(opname='LOAD_GLOBAL', opcode=116, arg=8, argval='list', argrepr='list', offset=108, starts_line=None, is_jump_target=False, positions=Positions(lineno=20, end_lineno=20, col_offset=20, end_col_offset=24))
	0.15                  Instruction(opname='LOAD_GLOBAL', opcode=116, arg=10, argval='int', argrepr='int', offset=118, starts_line=None, is_jump_target=False, positions=Positions(lineno=20, end_lineno=20, col_offset=25, end_col_offset=28))
	0.16                  Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=128, starts_line=None, is_jump_target=False, positions=Positions(lineno=20, end_lineno=20, col_offset=20, end_col_offset=29))
	0.17                  Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=132, starts_line=None, is_jump_target=False, positions=Positions(lineno=20, end_lineno=20, col_offset=15, end_col_offset=30))
	0.18                  Instruction(opname='CALL', opcode=171, arg=0, argval=0, argrepr='', offset=136, starts_line=None, is_jump_target=False, positions=Positions(lineno=20, end_lineno=20, col_offset=15, end_col_offset=32))
	0.19                  Instruction(opname='STORE_FAST', opcode=125, arg=4, argval='clusters', argrepr='clusters', offset=144, starts_line=None, is_jump_target=False, positions=Positions(lineno=20, end_lineno=20, col_offset=4, end_col_offset=12))
	0.20                  Instruction(opname='LOAD_GLOBAL', opcode=116, arg=13, argval='range', argrepr='NULL + range', offset=146, starts_line=22, is_jump_target=False, positions=Positions(lineno=22, end_lineno=22, col_offset=13, end_col_offset=18))
	0.21                  Instruction(opname='LOAD_FAST', opcode=124, arg=2, argval='max_iterations', argrepr='max_iterations', offset=156, starts_line=None, is_jump_target=False, positions=Positions(lineno=22, end_lineno=22, col_offset=19, end_col_offset=33))
	0.22                  Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=158, starts_line=None, is_jump_target=False, positions=Positions(lineno=22, end_lineno=22, col_offset=13, end_col_offset=34))
	0.23                  Instruction(opname='GET_ITER', opcode=68, arg=None, argval=None, argrepr='', offset=166, starts_line=None, is_jump_target=False, positions=Positions(lineno=22, end_lineno=34, col_offset=4, end_col_offset=33))
[168]

[0, 602]
168 :
	168.0                 Instruction(opname='FOR_ITER', opcode=93, arg=218, argval=608, argrepr='to 608', offset=168, starts_line=None, is_jump_target=True, positions=Positions(lineno=22, end_lineno=34, col_offset=4, end_col_offset=33))
[172, 608]

[168]
172 :
	172.0                 Instruction(opname='STORE_FAST', opcode=125, arg=5, argval='i', argrepr='i', offset=172, starts_line=None, is_jump_target=False, positions=Positions(lineno=22, end_lineno=22, col_offset=8, end_col_offset=9))
	172.1                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=13, argval='range', argrepr='NULL + range', offset=174, starts_line=25, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=41, end_col_offset=46))
	172.2                 Instruction(opname='LOAD_FAST', opcode=124, arg=1, argval='k', argrepr='k', offset=184, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=47, end_col_offset=48))
	172.3                 Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=186, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=41, end_col_offset=49))
	172.4                 Instruction(opname='GET_ITER', opcode=68, arg=None, argval=None, argrepr='', offset=194, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=19, end_col_offset=50))
	172.5                 Instruction(opname='LOAD_FAST_AND_CLEAR', opcode=143, arg=6, argval='_', argrepr='_', offset=196, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=19, end_col_offset=50))
	172.6                 Instruction(opname='SWAP', opcode=99, arg=2, argval=2, argrepr='', offset=198, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=19, end_col_offset=50))
	172.7                 Instruction(opname='BUILD_LIST', opcode=103, arg=0, argval=0, argrepr='', offset=200, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=19, end_col_offset=50))
	172.8                 Instruction(opname='SWAP', opcode=99, arg=2, argval=2, argrepr='', offset=202, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=19, end_col_offset=50))
[204]

[208, 172]
204 :
	204.0                 Instruction(opname='FOR_ITER', opcode=93, arg=19, argval=246, argrepr='to 246', offset=204, starts_line=None, is_jump_target=True, positions=Positions(lineno=25, end_lineno=25, col_offset=19, end_col_offset=50))
[208, 246]

[204]
208 :
	208.0                 Instruction(opname='STORE_FAST', opcode=125, arg=6, argval='_', argrepr='_', offset=208, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=36, end_col_offset=37))
	208.1                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=9, argval='list', argrepr='NULL + list', offset=210, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=20, end_col_offset=24))
	208.2                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=10, argval='int', argrepr='int', offset=220, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=25, end_col_offset=28))
	208.3                 Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=230, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=20, end_col_offset=29))
	208.4                 Instruction(opname='CALL', opcode=171, arg=0, argval=0, argrepr='', offset=234, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=20, end_col_offset=31))
	208.5                 Instruction(opname='LIST_APPEND', opcode=145, arg=2, argval=2, argrepr='', offset=242, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=20, end_col_offset=31))
	208.6                 Instruction(opname='JUMP_BACKWARD', opcode=140, arg=21, argval=204, argrepr='to 204', offset=244, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=20, end_col_offset=31))
[204]

[204]
246 :
	246.0                 Instruction(opname='END_FOR', opcode=4, arg=None, argval=None, argrepr='', offset=246, starts_line=None, is_jump_target=True, positions=Positions(lineno=25, end_lineno=25, col_offset=19, end_col_offset=50))
	246.1                 Instruction(opname='STORE_FAST', opcode=125, arg=4, argval='clusters', argrepr='clusters', offset=248, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=8, end_col_offset=16))
	246.2                 Instruction(opname='STORE_FAST', opcode=125, arg=6, argval='_', argrepr='_', offset=250, starts_line=None, is_jump_target=False, positions=Positions(lineno=25, end_lineno=25, col_offset=19, end_col_offset=50))
	246.3                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=13, argval='range', argrepr='NULL + range', offset=252, starts_line=26, is_jump_target=False, positions=Positions(lineno=26, end_lineno=26, col_offset=24, end_col_offset=29))
	246.4                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=15, argval='len', argrepr='NULL + len', offset=262, starts_line=None, is_jump_target=False, positions=Positions(lineno=26, end_lineno=26, col_offset=30, end_col_offset=33))
	246.5                 Instruction(opname='LOAD_FAST', opcode=124, arg=0, argval='X', argrepr='X', offset=272, starts_line=None, is_jump_target=False, positions=Positions(lineno=26, end_lineno=26, col_offset=34, end_col_offset=35))
	246.6                 Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=274, starts_line=None, is_jump_target=False, positions=Positions(lineno=26, end_lineno=26, col_offset=30, end_col_offset=36))
	246.7                 Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=282, starts_line=None, is_jump_target=False, positions=Positions(lineno=26, end_lineno=26, col_offset=24, end_col_offset=37))
	246.8                 Instruction(opname='GET_ITER', opcode=68, arg=None, argval=None, argrepr='', offset=290, starts_line=None, is_jump_target=False, positions=Positions(lineno=26, end_lineno=28, col_offset=8, end_col_offset=40))
[292]

[296, 246]
292 :
	292.0                 Instruction(opname='FOR_ITER', opcode=93, arg=75, argval=446, argrepr='to 446', offset=292, starts_line=None, is_jump_target=True, positions=Positions(lineno=26, end_lineno=28, col_offset=8, end_col_offset=40))
[296, 446]

[292]
296 :
	296.0                 Instruction(opname='STORE_FAST', opcode=125, arg=7, argval='sample_i', argrepr='sample_i', offset=296, starts_line=None, is_jump_target=False, positions=Positions(lineno=26, end_lineno=26, col_offset=12, end_col_offset=20))
	296.1                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=0, argval='np', argrepr='np', offset=298, starts_line=27, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=16, end_col_offset=18))
	296.2                 Instruction(opname='LOAD_ATTR', opcode=106, arg=16, argval='linalg', argrepr='linalg', offset=308, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=16, end_col_offset=25))
	296.3                 Instruction(opname='LOAD_ATTR', opcode=106, arg=19, argval='norm', argrepr='NULL|self + norm', offset=328, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=16, end_col_offset=30))
	296.4                 Instruction(opname='LOAD_FAST', opcode=124, arg=0, argval='X', argrepr='X', offset=348, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=31, end_col_offset=32))
	296.5                 Instruction(opname='LOAD_FAST', opcode=124, arg=7, argval='sample_i', argrepr='sample_i', offset=350, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=33, end_col_offset=41))
	296.6                 Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=352, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=31, end_col_offset=42))
	296.7                 Instruction(opname='LOAD_FAST', opcode=124, arg=3, argval='centroids', argrepr='centroids', offset=356, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=45, end_col_offset=54))
	296.8                 Instruction(opname='BINARY_OP', opcode=122, arg=10, argval=10, argrepr='-', offset=358, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=31, end_col_offset=54))
	296.9                 Instruction(opname='LOAD_CONST', opcode=100, arg=2, argval=None, argrepr='None', offset=362, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=56, end_col_offset=60))
	296.10                Instruction(opname='LOAD_CONST', opcode=100, arg=3, argval=1, argrepr='1', offset=364, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=62, end_col_offset=63))
	296.11                Instruction(opname='CALL', opcode=171, arg=3, argval=3, argrepr='', offset=366, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=16, end_col_offset=64))
	296.12                Instruction(opname='LOAD_ATTR', opcode=106, arg=21, argval='argmin', argrepr='NULL|self + argmin', offset=374, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=16, end_col_offset=71))
	296.13                Instruction(opname='CALL', opcode=171, arg=0, argval=0, argrepr='', offset=394, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=16, end_col_offset=73))
	296.14                Instruction(opname='STORE_FAST', opcode=125, arg=8, argval='r', argrepr='r', offset=402, starts_line=None, is_jump_target=False, positions=Positions(lineno=27, end_lineno=27, col_offset=12, end_col_offset=13))
	296.15                Instruction(opname='LOAD_FAST', opcode=124, arg=4, argval='clusters', argrepr='clusters', offset=404, starts_line=28, is_jump_target=False, positions=Positions(lineno=28, end_lineno=28, col_offset=12, end_col_offset=20))
	296.16                Instruction(opname='LOAD_FAST', opcode=124, arg=8, argval='r', argrepr='r', offset=406, starts_line=None, is_jump_target=False, positions=Positions(lineno=28, end_lineno=28, col_offset=21, end_col_offset=22))
	296.17                Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=408, starts_line=None, is_jump_target=False, positions=Positions(lineno=28, end_lineno=28, col_offset=12, end_col_offset=23))
	296.18                Instruction(opname='LOAD_ATTR', opcode=106, arg=23, argval='append', argrepr='NULL|self + append', offset=412, starts_line=None, is_jump_target=False, positions=Positions(lineno=28, end_lineno=28, col_offset=12, end_col_offset=30))
	296.19                Instruction(opname='LOAD_FAST', opcode=124, arg=7, argval='sample_i', argrepr='sample_i', offset=432, starts_line=None, is_jump_target=False, positions=Positions(lineno=28, end_lineno=28, col_offset=31, end_col_offset=39))
	296.20                Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=434, starts_line=None, is_jump_target=False, positions=Positions(lineno=28, end_lineno=28, col_offset=12, end_col_offset=40))
	296.21                Instruction(opname='POP_TOP', opcode=1, arg=None, argval=None, argrepr='', offset=442, starts_line=None, is_jump_target=False, positions=Positions(lineno=28, end_lineno=28, col_offset=12, end_col_offset=40))
	296.22                Instruction(opname='JUMP_BACKWARD', opcode=140, arg=77, argval=292, argrepr='to 292', offset=444, starts_line=None, is_jump_target=False, positions=Positions(lineno=28, end_lineno=28, col_offset=12, end_col_offset=40))
[292]

[292]
446 :
	446.0                 Instruction(opname='END_FOR', opcode=4, arg=None, argval=None, argrepr='', offset=446, starts_line=26, is_jump_target=True, positions=Positions(lineno=26, end_lineno=28, col_offset=8, end_col_offset=40))
	446.1                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=0, argval='np', argrepr='np', offset=448, starts_line=31, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=24, end_col_offset=26))
	446.2                 Instruction(opname='LOAD_ATTR', opcode=106, arg=25, argval='array', argrepr='NULL|self + array', offset=458, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=24, end_col_offset=32))
	446.3                 Instruction(opname='LOAD_FAST', opcode=124, arg=4, argval='clusters', argrepr='clusters', offset=478, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=68, end_col_offset=76))
	446.4                 Instruction(opname='GET_ITER', opcode=68, arg=None, argval=None, argrepr='', offset=480, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=33, end_col_offset=77))
	446.5                 Instruction(opname='LOAD_FAST_AND_CLEAR', opcode=143, arg=9, argval='cluster', argrepr='cluster', offset=482, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=33, end_col_offset=77))
	446.6                 Instruction(opname='SWAP', opcode=99, arg=2, argval=2, argrepr='', offset=484, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=33, end_col_offset=77))
	446.7                 Instruction(opname='BUILD_LIST', opcode=103, arg=0, argval=0, argrepr='', offset=486, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=33, end_col_offset=77))
	446.8                 Instruction(opname='SWAP', opcode=99, arg=2, argval=2, argrepr='', offset=488, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=33, end_col_offset=77))
[490]

[494, 446]
490 :
	490.0                 Instruction(opname='FOR_ITER', opcode=93, arg=22, argval=538, argrepr='to 538', offset=490, starts_line=None, is_jump_target=True, positions=Positions(lineno=31, end_lineno=31, col_offset=33, end_col_offset=77))
[494, 538]

[490]
494 :
	494.0                 Instruction(opname='STORE_FAST', opcode=125, arg=9, argval='cluster', argrepr='cluster', offset=494, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=57, end_col_offset=64))
	494.1                 Instruction(opname='LOAD_FAST', opcode=124, arg=0, argval='X', argrepr='X', offset=496, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=34, end_col_offset=35))
	494.2                 Instruction(opname='LOAD_FAST', opcode=124, arg=9, argval='cluster', argrepr='cluster', offset=498, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=36, end_col_offset=43))
	494.3                 Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=500, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=34, end_col_offset=44))
	494.4                 Instruction(opname='LOAD_ATTR', opcode=106, arg=27, argval='mean', argrepr='NULL|self + mean', offset=504, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=34, end_col_offset=49))
	494.5                 Instruction(opname='LOAD_CONST', opcode=100, arg=1, argval=0, argrepr='0', offset=524, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=50, end_col_offset=51))
	494.6                 Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=526, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=34, end_col_offset=52))
	494.7                 Instruction(opname='LIST_APPEND', opcode=145, arg=2, argval=2, argrepr='', offset=534, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=34, end_col_offset=52))
	494.8                 Instruction(opname='JUMP_BACKWARD', opcode=140, arg=24, argval=490, argrepr='to 490', offset=536, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=34, end_col_offset=52))
[490]

[490]
538 :
	538.0                 Instruction(opname='END_FOR', opcode=4, arg=None, argval=None, argrepr='', offset=538, starts_line=None, is_jump_target=True, positions=Positions(lineno=31, end_lineno=31, col_offset=33, end_col_offset=77))
	538.1                 Instruction(opname='SWAP', opcode=99, arg=2, argval=2, argrepr='', offset=540, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=33, end_col_offset=77))
	538.2                 Instruction(opname='STORE_FAST', opcode=125, arg=9, argval='cluster', argrepr='cluster', offset=542, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=33, end_col_offset=77))
	538.3                 Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=544, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=24, end_col_offset=78))
	538.4                 Instruction(opname='STORE_FAST', opcode=125, arg=10, argval='new_centroids', argrepr='new_centroids', offset=552, starts_line=None, is_jump_target=False, positions=Positions(lineno=31, end_lineno=31, col_offset=8, end_col_offset=21))
	538.5                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=0, argval='np', argrepr='np', offset=554, starts_line=32, is_jump_target=False, positions=Positions(lineno=32, end_lineno=32, col_offset=11, end_col_offset=13))
	538.6                 Instruction(opname='LOAD_ATTR', opcode=106, arg=29, argval='allclose', argrepr='NULL|self + allclose', offset=564, starts_line=None, is_jump_target=False, positions=Positions(lineno=32, end_lineno=32, col_offset=11, end_col_offset=22))
	538.7                 Instruction(opname='LOAD_FAST', opcode=124, arg=3, argval='centroids', argrepr='centroids', offset=584, starts_line=None, is_jump_target=False, positions=Positions(lineno=32, end_lineno=32, col_offset=23, end_col_offset=32))
	538.8                 Instruction(opname='LOAD_FAST', opcode=124, arg=10, argval='new_centroids', argrepr='new_centroids', offset=586, starts_line=None, is_jump_target=False, positions=Positions(lineno=32, end_lineno=32, col_offset=34, end_col_offset=47))
	538.9                 Instruction(opname='CALL', opcode=171, arg=2, argval=2, argrepr='', offset=588, starts_line=None, is_jump_target=False, positions=Positions(lineno=32, end_lineno=32, col_offset=11, end_col_offset=48))
	538.10                Instruction(opname='POP_JUMP_IF_FALSE', opcode=114, arg=2, argval=602, argrepr='to 602', offset=596, starts_line=None, is_jump_target=False, positions=Positions(lineno=32, end_lineno=32, col_offset=11, end_col_offset=48))
[598, 602]

[538]
598 :
	598.0                 Instruction(opname='POP_TOP', opcode=1, arg=None, argval=None, argrepr='', offset=598, starts_line=33, is_jump_target=False, positions=Positions(lineno=33, end_lineno=33, col_offset=12, end_col_offset=17))
	598.1                 Instruction(opname='JUMP_FORWARD', opcode=110, arg=4, argval=610, argrepr='to 610', offset=600, starts_line=None, is_jump_target=False, positions=Positions(lineno=33, end_lineno=33, col_offset=12, end_col_offset=17))
[610]

[538]
602 :
	602.0                 Instruction(opname='LOAD_FAST', opcode=124, arg=10, argval='new_centroids', argrepr='new_centroids', offset=602, starts_line=34, is_jump_target=True, positions=Positions(lineno=34, end_lineno=34, col_offset=20, end_col_offset=33))
	602.1                 Instruction(opname='STORE_FAST', opcode=125, arg=3, argval='centroids', argrepr='centroids', offset=604, starts_line=None, is_jump_target=False, positions=Positions(lineno=34, end_lineno=34, col_offset=8, end_col_offset=17))
	602.2                 Instruction(opname='JUMP_BACKWARD', opcode=140, arg=220, argval=168, argrepr='to 168', offset=606, starts_line=None, is_jump_target=False, positions=Positions(lineno=34, end_lineno=34, col_offset=8, end_col_offset=17))
[168]

[168]
608 :
	608.0                 Instruction(opname='END_FOR', opcode=4, arg=None, argval=None, argrepr='', offset=608, starts_line=22, is_jump_target=True, positions=Positions(lineno=22, end_lineno=34, col_offset=4, end_col_offset=33))
[610]

[598, 608]
610 :
	610.0                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=0, argval='np', argrepr='np', offset=610, starts_line=36, is_jump_target=True, positions=Positions(lineno=36, end_lineno=36, col_offset=13, end_col_offset=15))
	610.1                 Instruction(opname='LOAD_ATTR', opcode=106, arg=31, argval='zeros', argrepr='NULL|self + zeros', offset=620, starts_line=None, is_jump_target=False, positions=Positions(lineno=36, end_lineno=36, col_offset=13, end_col_offset=21))
	610.2                 Instruction(opname='LOAD_FAST', opcode=124, arg=0, argval='X', argrepr='X', offset=640, starts_line=None, is_jump_target=False, positions=Positions(lineno=36, end_lineno=36, col_offset=22, end_col_offset=23))
	610.3                 Instruction(opname='LOAD_ATTR', opcode=106, arg=6, argval='shape', argrepr='shape', offset=642, starts_line=None, is_jump_target=False, positions=Positions(lineno=36, end_lineno=36, col_offset=22, end_col_offset=29))
	610.4                 Instruction(opname='LOAD_CONST', opcode=100, arg=1, argval=0, argrepr='0', offset=662, starts_line=None, is_jump_target=False, positions=Positions(lineno=36, end_lineno=36, col_offset=30, end_col_offset=31))
	610.5                 Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=664, starts_line=None, is_jump_target=False, positions=Positions(lineno=36, end_lineno=36, col_offset=22, end_col_offset=32))
	610.6                 Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=668, starts_line=None, is_jump_target=False, positions=Positions(lineno=36, end_lineno=36, col_offset=13, end_col_offset=33))
	610.7                 Instruction(opname='STORE_FAST', opcode=125, arg=11, argval='y_pred', argrepr='y_pred', offset=676, starts_line=None, is_jump_target=False, positions=Positions(lineno=36, end_lineno=36, col_offset=4, end_col_offset=10))
	610.8                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=13, argval='range', argrepr='NULL + range', offset=678, starts_line=37, is_jump_target=False, positions=Positions(lineno=37, end_lineno=37, col_offset=21, end_col_offset=26))
	610.9                 Instruction(opname='LOAD_GLOBAL', opcode=116, arg=15, argval='len', argrepr='NULL + len', offset=688, starts_line=None, is_jump_target=False, positions=Positions(lineno=37, end_lineno=37, col_offset=27, end_col_offset=30))
	610.10                Instruction(opname='LOAD_FAST', opcode=124, arg=4, argval='clusters', argrepr='clusters', offset=698, starts_line=None, is_jump_target=False, positions=Positions(lineno=37, end_lineno=37, col_offset=31, end_col_offset=39))
	610.11                Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=700, starts_line=None, is_jump_target=False, positions=Positions(lineno=37, end_lineno=37, col_offset=27, end_col_offset=40))
	610.12                Instruction(opname='CALL', opcode=171, arg=1, argval=1, argrepr='', offset=708, starts_line=None, is_jump_target=False, positions=Positions(lineno=37, end_lineno=37, col_offset=21, end_col_offset=41))
	610.13                Instruction(opname='GET_ITER', opcode=68, arg=None, argval=None, argrepr='', offset=716, starts_line=None, is_jump_target=False, positions=Positions(lineno=37, end_lineno=39, col_offset=4, end_col_offset=40))
[718]

[610, 752]
718 :
	718.0                 Instruction(opname='FOR_ITER', opcode=93, arg=17, argval=756, argrepr='to 756', offset=718, starts_line=None, is_jump_target=True, positions=Positions(lineno=37, end_lineno=39, col_offset=4, end_col_offset=40))
[722, 756]

[718]
722 :
	722.0                 Instruction(opname='STORE_FAST', opcode=125, arg=12, argval='cluster_i', argrepr='cluster_i', offset=722, starts_line=None, is_jump_target=False, positions=Positions(lineno=37, end_lineno=37, col_offset=8, end_col_offset=17))
	722.1                 Instruction(opname='LOAD_FAST', opcode=124, arg=4, argval='clusters', argrepr='clusters', offset=724, starts_line=38, is_jump_target=False, positions=Positions(lineno=38, end_lineno=38, col_offset=24, end_col_offset=32))
	722.2                 Instruction(opname='LOAD_FAST', opcode=124, arg=12, argval='cluster_i', argrepr='cluster_i', offset=726, starts_line=None, is_jump_target=False, positions=Positions(lineno=38, end_lineno=38, col_offset=33, end_col_offset=42))
	722.3                 Instruction(opname='BINARY_SUBSCR', opcode=25, arg=None, argval=None, argrepr='', offset=728, starts_line=None, is_jump_target=False, positions=Positions(lineno=38, end_lineno=38, col_offset=24, end_col_offset=43))
	722.4                 Instruction(opname='GET_ITER', opcode=68, arg=None, argval=None, argrepr='', offset=732, starts_line=None, is_jump_target=False, positions=Positions(lineno=38, end_lineno=39, col_offset=8, end_col_offset=40))
[734]

[722, 738]
734 :
	734.0                 Instruction(opname='FOR_ITER', opcode=93, arg=7, argval=752, argrepr='to 752', offset=734, starts_line=None, is_jump_target=True, positions=Positions(lineno=38, end_lineno=39, col_offset=8, end_col_offset=40))
[738, 752]

[734]
738 :
	738.0                 Instruction(opname='STORE_FAST', opcode=125, arg=7, argval='sample_i', argrepr='sample_i', offset=738, starts_line=None, is_jump_target=False, positions=Positions(lineno=38, end_lineno=38, col_offset=12, end_col_offset=20))
	738.1                 Instruction(opname='LOAD_FAST', opcode=124, arg=12, argval='cluster_i', argrepr='cluster_i', offset=740, starts_line=39, is_jump_target=False, positions=Positions(lineno=39, end_lineno=39, col_offset=31, end_col_offset=40))
	738.2                 Instruction(opname='LOAD_FAST', opcode=124, arg=11, argval='y_pred', argrepr='y_pred', offset=742, starts_line=None, is_jump_target=False, positions=Positions(lineno=39, end_lineno=39, col_offset=12, end_col_offset=18))
	738.3                 Instruction(opname='LOAD_FAST', opcode=124, arg=7, argval='sample_i', argrepr='sample_i', offset=744, starts_line=None, is_jump_target=False, positions=Positions(lineno=39, end_lineno=39, col_offset=19, end_col_offset=27))
	738.4                 Instruction(opname='STORE_SUBSCR', opcode=60, arg=None, argval=None, argrepr='', offset=746, starts_line=None, is_jump_target=False, positions=Positions(lineno=39, end_lineno=39, col_offset=12, end_col_offset=28))
	738.5                 Instruction(opname='JUMP_BACKWARD', opcode=140, arg=9, argval=734, argrepr='to 734', offset=750, starts_line=None, is_jump_target=False, positions=Positions(lineno=39, end_lineno=39, col_offset=12, end_col_offset=28))
[734]

[734]
752 :
	752.0                 Instruction(opname='END_FOR', opcode=4, arg=None, argval=None, argrepr='', offset=752, starts_line=38, is_jump_target=True, positions=Positions(lineno=38, end_lineno=39, col_offset=8, end_col_offset=40))
	752.1                 Instruction(opname='JUMP_BACKWARD', opcode=140, arg=19, argval=718, argrepr='to 718', offset=754, starts_line=None, is_jump_target=False, positions=Positions(lineno=38, end_lineno=39, col_offset=8, end_col_offset=40))
[718]

[718]
756 :
	756.0                 Instruction(opname='END_FOR', opcode=4, arg=None, argval=None, argrepr='', offset=756, starts_line=37, is_jump_target=True, positions=Positions(lineno=37, end_lineno=39, col_offset=4, end_col_offset=40))
	756.1                 Instruction(opname='LOAD_FAST', opcode=124, arg=11, argval='y_pred', argrepr='y_pred', offset=758, starts_line=40, is_jump_target=False, positions=Positions(lineno=40, end_lineno=40, col_offset=11, end_col_offset=17))
	756.2                 Instruction(opname='RETURN_VALUE', opcode=83, arg=None, argval=None, argrepr='', offset=760, starts_line=None, is_jump_target=False, positions=Positions(lineno=40, end_lineno=40, col_offset=4, end_col_offset=17))
[inf]

[]
0 :
	0.0                   $1 = X
	0.1                   $2 = GLOBALS.np
	0.2                   $2 = $2.random
	0.3                   $3 = $2.choice
	0.4                   $4 = X
	0.5                   $4 = $4.shape
	0.6                   $5 = 0
	0.7                   $4 = $4[$5]
	0.8                   $5 = k
	0.9                   $2 = $3($4, $5)
	0.10                  $1 = $1[$2]
	0.11                  centroids = $1
	0.12                  $2 = GLOBALS.list
	0.13                  $3 = GLOBALS.list
	0.14                  $4 = GLOBALS.int
	0.15                  $3 = $3[$4]
	0.16                  $2 = $2[$3]
	0.17                  $1 = $2()
	0.18                  clusters = $1
	0.19                  $2 = GLOBALS.range
	0.20                  $3 = max_iterations
	0.21                  $1 = $2($3)
	0.22                  $1 = ITER $1
[168]

[0, 602]
168 :
	168.0                 $2 = next($1) HANDLE: GOTO 608
[172, 610]

[168]
172 :
	172.0                 i = $2
	172.1                 $3 = GLOBALS.range
	172.2                 $4 = k
	172.3                 $2 = $3($4)
	172.4                 $2 = ITER $2
	172.5                 $3 = _?
	172.6                 ($3, $2) = TUPLE($2, $3)
	172.7                 $4 = LIST()
	172.8                 ($4, $3) = TUPLE($3, $4)
[204]

[208, 172]
204 :
	204.0                 $5 = next($4) HANDLE: GOTO 246
[208, 246]

[204]
208 :
	208.0                 _ = $5
	208.1                 $6 = GLOBALS.list
	208.2                 $7 = GLOBALS.int
	208.3                 $6 = $6[$7]
	208.4                 $5 = $6()
	208.5                 $6 = $3.append
	208.6                 $6($5)
[204]

[204]
246 :
	246.0                 clusters = $3
	246.1                 _ = $2
	246.2                 $3 = GLOBALS.range
	246.3                 $5 = GLOBALS.len
	246.4                 $6 = X
	246.5                 $4 = $5($6)
	246.6                 $2 = $3($4)
	246.7                 $2 = ITER $2
[292]

[296, 246]
292 :
	292.0                 $3 = next($2) HANDLE: GOTO 446
[296, 446]

[292]
296 :
	296.0                 sample_i = $3
	296.1                 $3 = GLOBALS.np
	296.2                 $3 = $3.linalg
	296.3                 $4 = $3.norm
	296.4                 $5 = X
	296.5                 $6 = sample_i
	296.6                 $5 = $5[$6]
	296.7                 $6 = centroids
	296.8                 $5 = $5 - $6
	296.9                 $6 = None
	296.10                $7 = 1
	296.11                $3 = $4($5, $6, $7)
	296.12                $4 = $3.argmin
	296.13                $3 = $4()
	296.14                r = $3
	296.15                $3 = clusters
	296.16                $4 = r
	296.17                $3 = $3[$4]
	296.18                $4 = $3.append
	296.19                $5 = sample_i
	296.20                $3 = $4($5)
[292]

[292]
446 :
	446.0                 $2 = GLOBALS.np
	446.1                 $3 = $2.array
	446.2                 $4 = clusters
	446.3                 $4 = ITER $4
	446.4                 $5 = cluster?
	446.5                 ($5, $4) = TUPLE($4, $5)
	446.6                 $6 = LIST()
	446.7                 ($6, $5) = TUPLE($5, $6)
[490]

[494, 446]
490 :
	490.0                 $7 = next($6) HANDLE: GOTO 538
[494, 538]

[490]
494 :
	494.0                 cluster = $7
	494.1                 $7 = X
	494.2                 $8 = cluster
	494.3                 $7 = $7[$8]
	494.4                 $8 = $7.mean
	494.5                 $9 = 0
	494.6                 $7 = $8($9)
	494.7                 $8 = $5.append
	494.8                 $8($7)
[490]

[490]
538 :
	538.0                 ($5, $4) = TUPLE($4, $5)
	538.1                 cluster = $5
	538.2                 $2 = $3($4)
	538.3                 new_centroids = $2
	538.4                 $2 = GLOBALS.np
	538.5                 $3 = $2.allclose
	538.6                 $4 = centroids
	538.7                 $5 = new_centroids
	538.8                 $2 = $3($4, $5)
	538.9                 $2 = NOT $2
	538.10                IF $2 GOTO 602
[602, 610]

[538]
602 :
	602.0                 $2 = new_centroids
	602.1                 centroids = $2
[168]

[168, 538]
610 :
	610.0                 $1 = GLOBALS.np
	610.1                 $2 = $1.zeros
	610.2                 $3 = X
	610.3                 $3 = $3.shape
	610.4                 $4 = 0
	610.5                 $3 = $3[$4]
	610.6                 $1 = $2($3)
	610.7                 y_pred = $1
	610.8                 $2 = GLOBALS.range
	610.9                 $4 = GLOBALS.len
	610.10                $5 = clusters
	610.11                $3 = $4($5)
	610.12                $1 = $2($3)
	610.13                $1 = ITER $1
[718]

[610, 734]
718 :
	718.0                 $2 = next($1) HANDLE: GOTO 756
[722, 756]

[718]
722 :
	722.0                 cluster_i = $2
	722.1                 $2 = clusters
	722.2                 $3 = cluster_i
	722.3                 $2 = $2[$3]
	722.4                 $2 = ITER $2
[734]

[722, 738]
734 :
	734.0                 $3 = next($2) HANDLE: GOTO 752
[738, 718]

[734]
738 :
	738.0                 sample_i = $3
	738.1                 $3 = cluster_i
	738.2                 $4 = y_pred
	738.3                 $5 = sample_i
	738.4                 $6 = $4.__setitem__
	738.5                 $6($5, $3)
[734]

[718]
756 :
	756.0                 $1 = y_pred
	756.1                 RETURN $1
[inf]

Transfer $1 = X at (0, 0)
  X = Set(@param X) : numpy.ndarray
Prev: X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map()
  X = Set(@param X) : numpy.ndarray
Post: $1->{@param X}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1))

Transfer $2 = GLOBALS.np at (1, 0)
Prev: $1->{@param X}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1))
Post: $1->{@param X}, $2->{@type 0}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@scope locals=Set($1, $2))

Transfer $2 = $2.random at (2, 0)
  $2 = Set(@type 0) : module numpy
Prev: $1->{@param X}, $2->{@type 0}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@scope locals=Set($1, $2))
  $2 = Set(@type 1) : module random.random
Post: $1->{@param X}, $2->{@type 1}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 1: module random.random
    Dirty: Map(@scope locals=Set($1, $2))

Transfer $3 = $2.choice at (3, 0)
  $2 = Set(@type 1) : module random.random
Prev: $1->{@param X}, $2->{@type 1}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 1: module random.random
    Dirty: Map(@scope locals=Set($1, $2))
  $2 = Set(@type 1) : module random.random
Post: $1->{@param X}, $2->{@type 1}, $3->{@type 2}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 1: module random.random,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3))

Transfer $4 = X at (4, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $1->{@param X}, $3->{@type 2}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3))
  X = Set(@param X) : numpy.ndarray
Post: $1->{@param X}, $3->{@type 2}, $4->{@param X}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3, $4))

Transfer $4 = $4.shape at (5, 0)
  $4 = Set(@param X) : numpy.ndarray
Prev: $1->{@param X}, $3->{@type 2}, $4->{@param X}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3, $4))
  $4 = Set(@location 5) : builtins.list[builtins.int]
Post: $1->{@param X}, $3->{@type 2}, $4->{@location 5}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 5: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3, $4))

Transfer $5 = 0 at (6, 0)
Prev: $1->{@param X}, $3->{@type 2}, $4->{@location 5}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 5: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3, $4))
Post: $1->{@param X}, $3->{@type 2}, $4->{@location 5}, $5->{@type 3}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 5: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 3: Literal(0)
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Transfer $4 = $4[$5] at (7, 0)
  $5 = Set(@type 3) : Literal(0)
  $4 = Set(@location 5) : builtins.list[builtins.int]
Prev: $1->{@param X}, $3->{@type 2}, $4->{@location 5}, $5->{@type 3}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 5: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 3: Literal(0)
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
  $5 = Set(@type 3) : Literal(0)
  $4 = Set(@type 4) : builtins.int
Post: $1->{@param X}, $3->{@type 2}, $4->{@type 4}, $5->{@type 3}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 5: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 3: Literal(0),@type 4: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Transfer $5 = k at (8, 0)
  k = Set(@param k) : builtins.int
Prev: $1->{@param X}, $3->{@type 2}, $4->{@type 4}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
  k = Set(@param k) : builtins.int
Post: $1->{@param X}, $3->{@type 2}, $4->{@type 4}, $5->{@param k}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Transfer $2 = $3($4, $5) at (9, 0)
  $4 = Set(@type 4) : builtins.int
  $5 = Set(@param k) : builtins.int
  $3 = Set(@type 2) : Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
Prev: $1->{@param X}, $3->{@type 2}, $4->{@type 4}, $5->{@param k}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
  $4 = Set(@type 4) : builtins.int
  $5 = Set(@param k) : builtins.int
  $3 = Set(@type 2) : Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
Post: $1->{@param X}, $2->{@location 9}, $3->{@type 2}, $4->{@type 4}, $5->{@param k}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 9: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Transfer $1 = $1[$2] at (10, 0)
  $2 = Set(@location 9) : numpy.ndarray
  $1 = Set(@param X) : numpy.ndarray
Prev: $1->{@param X}, $2->{@location 9}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 9: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
  $2 = Set(@location 9) : numpy.ndarray
  $1 = Set(@location 10) : numpy.ndarray
Post: $1->{@location 10}, $2->{@location 9}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 9: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Transfer centroids = $1 at (11, 0)
  $1 = Set(@location 10) : numpy.ndarray
Prev: $1->{@location 10}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
  $1 = Set(@location 10) : numpy.ndarray
Post: $1->{@location 10}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Transfer $2 = GLOBALS.list at (12, 0)
Prev: X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
Post: $2->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Transfer $3 = GLOBALS.list at (13, 0)
Prev: $2->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
Post: $2->{@type 5}, $3->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Transfer $4 = GLOBALS.int at (14, 0)
Prev: $2->{@type 5}, $3->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
Post: $2->{@type 5}, $3->{@type 5}, $4->{@type 6}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Transfer $3 = $3[$4] at (15, 0)
  $4 = Set(@type 6) : builtins.type[builtins.int]
  $3 = Set(@type 5) : builtins.type[builtins.list]
Prev: $2->{@type 5}, $3->{@type 5}, $4->{@type 6}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
  $4 = Set(@type 6) : builtins.type[builtins.int]
  $3 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
Post: $2->{@type 5}, $3->{@type 7}, $4->{@type 6}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int],@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Transfer $2 = $2[$3] at (16, 0)
  $3 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
  $2 = Set(@type 5) : builtins.type[builtins.list]
Prev: $2->{@type 5}, $3->{@type 7}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list],@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
  $3 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
  $2 = Set(@type 8) : builtins.type[builtins.list[builtins.list[builtins.int]]]
Post: $2->{@type 8}, $3->{@type 7}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list],@type 7: builtins.type[builtins.list[builtins.int]],@type 8: builtins.type[builtins.list[builtins.list[builtins.int]]]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Transfer $1 = $2() at (17, 0)
  $2 = Set(@type 8) : builtins.type[builtins.list[builtins.list[builtins.int]]]
Prev: $2->{@type 8}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 8: builtins.type[builtins.list[builtins.list[builtins.int]]]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
  $2 = Set(@type 8) : builtins.type[builtins.list[builtins.list[builtins.int]]]
Post: $1->{@location 17}, $2->{@type 8}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 8: builtins.type[builtins.list[builtins.list[builtins.int]]]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Transfer clusters = $1 at (18, 0)
  $1 = Set(@location 17) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 17}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
  $1 = Set(@location 17) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 17}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Transfer $2 = GLOBALS.range at (19, 0)
Prev: X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))
Post: $2->{@type 9}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Transfer $3 = max_iterations at (20, 0)
  max_iterations = Set(@param max_iterations) : builtins.int
Prev: $2->{@type 9}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))
  max_iterations = Set(@param max_iterations) : builtins.int
Post: $2->{@type 9}, $3->{@param max_iterations}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Transfer $1 = $2($3) at (21, 0)
  $3 = Set(@param max_iterations) : builtins.int
  $2 = Set(@type 9) : builtins.type[builtins.range]
Prev: $2->{@type 9}, $3->{@param max_iterations}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))
  $3 = Set(@param max_iterations) : builtins.int
  $2 = Set(@type 9) : builtins.type[builtins.range]
Post: $1->{@type 10}, $2->{@type 9}, $3->{@param max_iterations}, @location 21:*->{@param max_iterations}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range,@type 9: builtins.type[builtins.range]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Transfer $1 = ITER $1 at (22, 0)
  $1 = Set(@type 10) : builtins.range
Prev: $1->{@type 10}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))
  $1 = Set(@location 22) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Transfer $2 = NEXT $1 at (168, 0)
  $1 = Set(@location 22) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map()
  $1 = Set(@location 22) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@type 4}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2))

Transfer i = $2 at (172, 0)
  $2 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@type 4}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2))
  $2 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@type 4}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, i->{@type 4}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, i))

Transfer $3 = GLOBALS.range at (173, 0)
Prev: $1->{@location 22}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, i))
Post: $1->{@location 22}, $3->{@type 9}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, i))

Transfer $4 = k at (174, 0)
  k = Set(@param k) : builtins.int
Prev: $1->{@location 22}, $3->{@type 9}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, i))
  k = Set(@param k) : builtins.int
Post: $1->{@location 22}, $3->{@type 9}, $4->{@param k}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $2 = $3($4) at (175, 0)
  $4 = Set(@param k) : builtins.int
  $3 = Set(@type 9) : builtins.type[builtins.range]
Prev: $1->{@location 22}, $3->{@type 9}, $4->{@param k}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
  $4 = Set(@param k) : builtins.int
  $3 = Set(@type 9) : builtins.type[builtins.range]
Post: $1->{@location 22}, $2->{@type 10}, $3->{@type 9}, $4->{@param k}, @location 175:*->{@param k}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $2 = ITER $2 at (176, 0)
  $2 = Set(@type 10) : builtins.range
Prev: $1->{@location 22}, $2->{@type 10}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
  $2 = Set(@location 176) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@location 176}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $3 = _? at (177, 0)
Prev: $1->{@location 22}, $2->{@location 176}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
Post: $1->{@location 22}, $2->{@location 176}, $3->{@type 11}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer ($3, $2) = TUPLE($2, $3) at (178, 0)
  $3 = Set(@type 11) : Literal(Ellipsis)
  $2 = Set(@location 176) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@location 176}, $3->{@type 11}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
  $3 = Set(@location 176) : typing.Iterator[builtins.int]
  $2 = Set(@type 11) : Literal(Ellipsis)
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, @location 178:0->{@location 176}, @location 178:1->{@type 11}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $4 = LIST() at (179, 0)
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, $4->{@location 179}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer ($4, $3) = TUPLE($3, $4) at (180, 0)
  $4 = Set(@location 179) : Literal([])
  $3 = Set(@location 176) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, $4->{@location 179}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
  $4 = Set(@location 176) : typing.Iterator[builtins.int]
  $3 = Set(@location 179) : Literal([])
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 180:0->{@location 176}, @location 180:1->{@location 179}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $5 = NEXT $4 at (204, 0)
  $4 = Set(@location 176) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
  $4 = Set(@location 176) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, i))

Transfer _ = $5 at (208, 0)
  $5 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, i))
  $5 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, X->{@param X}, _->{@type 4}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, _, i))

Transfer $6 = GLOBALS.list at (209, 0)
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, _, i))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list]
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, _, i))

Transfer $7 = GLOBALS.int at (210, 0)
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list]
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, _, i))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, $7->{@type 6}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6 = $6[$7] at (211, 0)
  $6 = Set(@type 5) : builtins.type[builtins.list]
  $7 = Set(@type 6) : builtins.type[builtins.int]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, $7->{@type 6}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $6 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
  $7 = Set(@type 6) : builtins.type[builtins.int]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 7}, $7->{@type 6}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int],@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $5 = $6() at (212, 0)
  $6 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 7}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $6 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@type 7}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6 = $3.append at (213, 0)
  $3 = Set(@location 179) : Literal([])
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $3 = Set(@location 179) : Literal([])
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6($5) at (214, 0)
  $5 = Set(@location 212) : builtins.list[builtins.int]
  $6 = Set(@location 213) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),))
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $5 = Set(@location 212) : builtins.list[builtins.int]
  $6 = Set(@location 213) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 179:*->{@location 212}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $5 = NEXT $4 at (204, 0)
  $4 = Set(@location 176) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $4 = Set(@location 176) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer _ = $5 at (208, 0)
  $5 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $5 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, _->{@type 4}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6 = GLOBALS.list at (209, 0)
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $7 = GLOBALS.int at (210, 0)
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, $7->{@type 6}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6 = $6[$7] at (211, 0)
  $6 = Set(@type 5) : builtins.type[builtins.list]
  $7 = Set(@type 6) : builtins.type[builtins.int]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, $7->{@type 6}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $6 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
  $7 = Set(@type 6) : builtins.type[builtins.int]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 7}, $7->{@type 6}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int],@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $5 = $6() at (212, 0)
  $6 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 7}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $6 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@type 7}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6 = $3.append at (213, 0)
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 179:*->{@location 212}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6($5) at (214, 0)
  $5 = Set(@location 212) : builtins.list[builtins.int]
  $6 = Set(@location 213) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),))
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 179:*->{@location 212}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $5 = Set(@location 212) : builtins.list[builtins.int]
  $6 = Set(@location 213) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 179:*->{@location 212}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer clusters = $3 at (246, 0)
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer _ = $2 at (247, 0)
  $2 = Set(@type 11) : Literal(Ellipsis)
Prev: $1->{@location 22}, $2->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $2 = Set(@type 11) : Literal(Ellipsis)
Post: $1->{@location 22}, $2->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, _->{@type 11}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $3 = GLOBALS.range at (248, 0)
Prev: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
Post: $1->{@location 22}, $3->{@type 9}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $5 = GLOBALS.len at (249, 0)
Prev: $1->{@location 22}, $3->{@type 9}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
Post: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $6 = X at (250, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  X = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, $6->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $4 = $5($6) at (251, 0)
  $5 = Set(@type 13) : Overloaded(([](((0)x=(),) -> builtins.int),))
  $6 = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, $6->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $5 = Set(@type 13) : Overloaded(([](((0)x=(),) -> builtins.int),))
  $6 = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 9}, $4->{@type 4}, $5->{@type 13}, $6->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $2 = $3($4) at (252, 0)
  $4 = Set(@type 4) : builtins.int
  $3 = Set(@type 9) : builtins.type[builtins.range]
Prev: $1->{@location 22}, $3->{@type 9}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $4 = Set(@type 4) : builtins.int
  $3 = Set(@type 9) : builtins.type[builtins.range]
Post: $1->{@location 22}, $2->{@type 10}, $3->{@type 9}, $4->{@type 4}, @location 179:*->{@location 212}, @location 252:*->{@type 4}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $2 = ITER $2 at (253, 0)
  $2 = Set(@type 10) : builtins.range
Prev: $1->{@location 22}, $2->{@type 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $2 = Set(@location 253) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $3 = NEXT $2 at (292, 0)
  $2 = Set(@location 253) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $2 = Set(@location 253) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer sample_i = $3 at (296, 0)
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $3 = GLOBALS.np at (297, 0)
Prev: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $3 = $3.linalg at (298, 0)
  $3 = Set(@type 0) : module numpy
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  $3 = Set(@type 14) : module linalg.linalg
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 14: module linalg.linalg,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $4 = $3.norm at (299, 0)
  $3 = Set(@type 14) : module linalg.linalg
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 14: module linalg.linalg,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  $3 = Set(@type 14) : module linalg.linalg
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, $4->{@type 15}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 14: module linalg.linalg,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $5 = X at (300, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  X = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $6 = sample_i at (301, 0)
  sample_i = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  sample_i = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $5 = $5[$6] at (302, 0)
  $5 = Set(@param X) : numpy.ndarray
  $6 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  $5 = Set(@location 302) : numpy.ndarray
  $6 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $6 = centroids at (303, 0)
  centroids = Set(@location 10) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  centroids = Set(@location 10) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@location 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $5 = $5 - $6 at (304, 0)
  $5 = Set(@location 302) : numpy.ndarray
  $6 = Set(@location 10) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@location 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  $5 = Set(@location 304) : numpy.ndarray
  $6 = Set(@location 10) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@location 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $6 = None at (305, 0)
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $7 = 1 at (306, 0)
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $3 = $4($5, $6, $7) at (307, 0)
  $5 = Set(@location 304) : numpy.ndarray
  $4 = Set(@type 15) : Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),))
  $7 = Set(@type 16) : Literal(1)
  $6 = Set(@type 12) : Literal(None)
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  $5 = Set(@location 304) : numpy.ndarray
  $4 = Set(@type 15) : Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),))
  $7 = Set(@type 16) : Literal(1)
  $6 = Set(@type 12) : Literal(None)
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 307: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $4 = $3.argmin at (308, 0)
  $3 = Set(@location 307) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 307: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  $3 = Set(@location 307) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, $4->{@type 17}, @location 179:*->{@location 212}, @location 308:self->{@location 307}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 307: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer $3 = $4() at (309, 0)
  $4 = Set(@type 17) : Overloaded(([](() -> builtins.int),))
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 17}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  $4 = Set(@type 17) : Overloaded(([](() -> builtins.int),))
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, $4->{@type 17}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))

Transfer r = $3 at (310, 0)
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, sample_i))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = clusters at (311, 0)
  clusters = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  clusters = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = r at (312, 0)
  r = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  r = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $3[$4] at (313, 0)
  $4 = Set(@type 4) : builtins.int
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $4 = Set(@type 4) : builtins.int
  $3 = Set(@location 313) : builtins.list[builtins.int]
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 313}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = $3.append at (314, 0)
  $3 = Set(@location 313) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@location 313}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@location 313) : builtins.list[builtins.int]
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 313}, $4->{@location 314}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = sample_i at (315, 0)
  sample_i = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@location 314}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  sample_i = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $4->{@location 314}, $5->{@type 4}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $4($5) at (316, 0)
  $5 = Set(@type 4) : builtins.int
  $4 = Set(@location 314) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),))
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@location 314}, $5->{@type 4}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@type 4) : builtins.int
  $4 = Set(@location 314) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),))
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 12}, $4->{@location 314}, $5->{@type 4}, @location 179:*->{@location 212}, @location 313:*->{@type 4}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @location 313=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = NEXT $2 at (292, 0)
  $2 = Set(@location 253) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $2 = Set(@location 253) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer sample_i = $3 at (296, 0)
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = GLOBALS.np at (297, 0)
Prev: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $3.linalg at (298, 0)
  $3 = Set(@type 0) : module numpy
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@type 14) : module linalg.linalg
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 14: module linalg.linalg,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = $3.norm at (299, 0)
  $3 = Set(@type 14) : module linalg.linalg
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 14: module linalg.linalg,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@type 14) : module linalg.linalg
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, $4->{@type 15}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 14: module linalg.linalg,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = X at (300, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  X = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $6 = sample_i at (301, 0)
  sample_i = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  sample_i = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = $5[$6] at (302, 0)
  $5 = Set(@param X) : numpy.ndarray
  $6 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 302) : numpy.ndarray
  $6 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $6 = centroids at (303, 0)
  centroids = Set(@location 10) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  centroids = Set(@location 10) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@location 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = $5 - $6 at (304, 0)
  $5 = Set(@location 302) : numpy.ndarray
  $6 = Set(@location 10) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@location 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 304) : numpy.ndarray
  $6 = Set(@location 10) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@location 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $6 = None at (305, 0)
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $7 = 1 at (306, 0)
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $4($5, $6, $7) at (307, 0)
  $5 = Set(@location 304) : numpy.ndarray
  $4 = Set(@type 15) : Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),))
  $7 = Set(@type 16) : Literal(1)
  $6 = Set(@type 12) : Literal(None)
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 304) : numpy.ndarray
  $4 = Set(@type 15) : Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),))
  $7 = Set(@type 16) : Literal(1)
  $6 = Set(@type 12) : Literal(None)
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 307: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = $3.argmin at (308, 0)
  $3 = Set(@location 307) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 307: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@location 307) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, $4->{@type 17}, @location 179:*->{@location 212}, @location 308:self->{@location 307}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 307: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $4() at (309, 0)
  $4 = Set(@type 17) : Overloaded(([](() -> builtins.int),))
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 17}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $4 = Set(@type 17) : Overloaded(([](() -> builtins.int),))
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, $4->{@type 17}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer r = $3 at (310, 0)
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $2 = GLOBALS.np at (446, 0)
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $2->{@type 0}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $2.array at (447, 0)
  $2 = Set(@type 0) : module numpy
Prev: $1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $2 = Set(@type 0) : module numpy
Post: $1->{@location 22}, $2->{@type 0}, $3->{@type 18}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = clusters at (448, 0)
  clusters = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $3->{@type 18}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  clusters = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = ITER $4 at (449, 0)
  $4 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $4 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = cluster? at (450, 0)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, $5->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer ($5, $4) = TUPLE($4, $5) at (451, 0)
  $5 = Set(@type 11) : Literal(Ellipsis)
  $4 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, $5->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
  $4 = Set(@type 11) : Literal(Ellipsis)
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, @location 179:*->{@location 212}, @location 451:0->{@location 449}, @location 451:1->{@type 11}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $6 = LIST() at (452, 0)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, $6->{@location 452}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer ($6, $5) = TUPLE($5, $6) at (453, 0)
  $5 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
  $6 = Set(@location 452) : Literal([])
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, $6->{@location 452}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 452) : Literal([])
  $6 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 453:0->{@location 449}, @location 453:1->{@location 452}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $7 = NEXT $6 at (490, 0)
  $6 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $6 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 490: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer cluster = $7 at (494, 0)
  $7 = Set(@location 490) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 490: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $7 = Set(@location 490) : builtins.list[builtins.int]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 490: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, cluster, clusters, i, r, sample_i))

Transfer $7 = X at (495, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 490: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, cluster, clusters, i, r, sample_i))
  X = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 490: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, cluster, clusters, i, r, sample_i))

Transfer $8 = cluster at (496, 0)
  cluster = Set(@location 490) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 490: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, cluster, clusters, i, r, sample_i))
  cluster = Set(@location 490) : builtins.list[builtins.int]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, $8->{@location 490}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 490: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, _, cluster, clusters, i, r, sample_i))

Transfer $7 = $7[$8] at (497, 0)
  $7 = Set(@param X) : numpy.ndarray
  $8 = Set(@location 490) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, $8->{@location 490}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 490: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 497) : numpy.ndarray
  $8 = Set(@location 490) : builtins.list[builtins.int]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, $8->{@location 490}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 490: builtins.list[builtins.int],@location 497: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, _, cluster, clusters, i, r, sample_i))

Transfer $8 = $7.mean at (498, 0)
  $7 = Set(@location 497) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 497: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 497) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, $8->{@type 19}, @location 179:*->{@location 212}, @location 498:self->{@location 497}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 497: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, _, cluster, clusters, i, r, sample_i))

Transfer $9 = 0 at (499, 0)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, _, cluster, clusters, i, r, sample_i))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $7 = $8($9) at (500, 0)
  $9 = Set(@type 3) : Literal(0)
  $8 = Set(@type 19) : Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $9 = Set(@type 3) : Literal(0)
  $8 = Set(@type 19) : Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8 = $5.append at (501, 0)
  $5 = Set(@location 452) : Literal([])
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $5 = Set(@location 452) : Literal([])
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8($7) at (502, 0)
  $7 = Set(@location 500) : numpy.ndarray
  $8 = Set(@location 501) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),))
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 500) : numpy.ndarray
  $8 = Set(@location 501) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[Q], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $7 = NEXT $6 at (490, 0)
  $6 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $6 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer cluster = $7 at (494, 0)
  $7 = Set(@location 490) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 490) : builtins.list[builtins.int]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $7 = X at (495, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  X = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8 = cluster at (496, 0)
  cluster = Set(@location 490) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  cluster = Set(@location 490) : builtins.list[builtins.int]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, $8->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $7 = $7[$8] at (497, 0)
  $7 = Set(@param X) : numpy.ndarray
  $8 = Set(@location 490) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, $8->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 497) : numpy.ndarray
  $8 = Set(@location 490) : builtins.list[builtins.int]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, $8->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 497: numpy.ndarray,@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8 = $7.mean at (498, 0)
  $7 = Set(@location 497) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 497: numpy.ndarray,@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 497) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, $8->{@type 19}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 498:self->{@location 497}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 497: numpy.ndarray,@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $9 = 0 at (499, 0)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $7 = $8($9) at (500, 0)
  $9 = Set(@type 3) : Literal(0)
  $8 = Set(@type 19) : Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $9 = Set(@type 3) : Literal(0)
  $8 = Set(@type 19) : Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8 = $5.append at (501, 0)
  $5 = Set(@location 452) : builtins.list[numpy.ndarray]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $5 = Set(@location 452) : builtins.list[numpy.ndarray]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8($7) at (502, 0)
  $7 = Set(@location 500) : numpy.ndarray
  $8 = Set(@location 501) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),))
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 500) : numpy.ndarray
  $8 = Set(@location 501) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),)),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer ($5, $4) = TUPLE($4, $5) at (538, 0)
  $5 = Set(@location 452) : builtins.list[numpy.ndarray]
  $4 = Set(@type 11) : Literal(Ellipsis)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $5 = Set(@type 11) : Literal(Ellipsis)
  $4 = Set(@location 452) : builtins.list[numpy.ndarray]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, $5->{@type 11}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 538:0->{@type 11}, @location 538:1->{@location 452}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer cluster = $5 at (539, 0)
  $5 = Set(@type 11) : Literal(Ellipsis)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, $5->{@type 11}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $5 = Set(@type 11) : Literal(Ellipsis)
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, $5->{@type 11}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, cluster->{@type 11}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $2 = $3($4) at (540, 0)
  $4 = Set(@location 452) : builtins.list[numpy.ndarray]
  $3 = Set(@type 18) : Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $4 = Set(@location 452) : builtins.list[numpy.ndarray]
  $3 = Set(@type 18) : Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
Post: $1->{@location 22}, $2->{@location 540}, $3->{@type 18}, $4->{@location 452}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer new_centroids = $2 at (541, 0)
  $2 = Set(@location 540) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $2 = Set(@location 540) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $2 = GLOBALS.np at (542, 0)
Prev: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
Post: $1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $3 = $2.allclose at (543, 0)
  $2 = Set(@type 0) : module numpy
Prev: $1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $2 = Set(@type 0) : module numpy
Post: $1->{@location 22}, $2->{@type 0}, $3->{@type 20}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $4 = centroids at (544, 0)
  centroids = Set(@location 10) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 20}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  centroids = Set(@location 10) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 20}, $4->{@location 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $5 = new_centroids at (545, 0)
  new_centroids = Set(@location 540) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 20}, $4->{@location 10}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  new_centroids = Set(@location 540) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 20}, $4->{@location 10}, $5->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $2 = $3($4, $5) at (546, 0)
  $4 = Set(@location 10) : numpy.ndarray
  $5 = Set(@location 540) : numpy.ndarray
  $3 = Set(@type 20) : Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
Prev: $1->{@location 22}, $3->{@type 20}, $4->{@location 10}, $5->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $4 = Set(@location 10) : numpy.ndarray
  $5 = Set(@location 540) : numpy.ndarray
  $3 = Set(@type 20) : Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
Post: $1->{@location 22}, $2->{@type 21}, $3->{@type 20}, $4->{@location 10}, $5->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool))),@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $2 = NOT $2 at (547, 0)
  $2 = Set(@type 21) : builtins.bool
Prev: $1->{@location 22}, $2->{@type 21}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $2 = Set(@type 21) : builtins.bool
Post: $1->{@location 22}, $2->{@type 21}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer IF $2 GOTO 602 at (548, 0)
  $2 = Set(@type 21) : builtins.bool
Prev: $1->{@location 22}, $2->{@type 21}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $2 = Set(@type 21) : builtins.bool
Post: $1->{@location 22}, $2->{@type 21}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $2 = new_centroids at (602, 0)
  new_centroids = Set(@location 540) : numpy.ndarray
Prev: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  new_centroids = Set(@location 540) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer centroids = $2 at (603, 0)
  $2 = Set(@location 540) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $2 = Set(@location 540) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, centroids, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $2 = NEXT $1 at (168, 0)
  $1 = Set(@location 22) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map()
  $1 = Set(@location 22) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2))

Transfer i = $2 at (172, 0)
  $2 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2))
  $2 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, i->{@type 4}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, i))

Transfer $3 = GLOBALS.range at (173, 0)
Prev: $1->{@location 22}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, i))
Post: $1->{@location 22}, $3->{@type 9}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, i))

Transfer $4 = k at (174, 0)
  k = Set(@param k) : builtins.int
Prev: $1->{@location 22}, $3->{@type 9}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, i))
  k = Set(@param k) : builtins.int
Post: $1->{@location 22}, $3->{@type 9}, $4->{@param k}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $2 = $3($4) at (175, 0)
  $4 = Set(@param k) : builtins.int
  $3 = Set(@type 9) : builtins.type[builtins.range]
Prev: $1->{@location 22}, $3->{@type 9}, $4->{@param k}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
  $4 = Set(@param k) : builtins.int
  $3 = Set(@type 9) : builtins.type[builtins.range]
Post: $1->{@location 22}, $2->{@type 10}, $3->{@type 9}, $4->{@param k}, @location 175:*->{@param k}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $2 = ITER $2 at (176, 0)
  $2 = Set(@type 10) : builtins.range
Prev: $1->{@location 22}, $2->{@type 10}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
  $2 = Set(@location 176) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@location 176}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $3 = _? at (177, 0)
Prev: $1->{@location 22}, $2->{@location 176}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
Post: $1->{@location 22}, $2->{@location 176}, $3->{@type 11}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer ($3, $2) = TUPLE($2, $3) at (178, 0)
  $3 = Set(@type 11) : Literal(Ellipsis)
  $2 = Set(@location 176) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@location 176}, $3->{@type 11}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
  $3 = Set(@location 176) : typing.Iterator[builtins.int]
  $2 = Set(@type 11) : Literal(Ellipsis)
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, @location 178:0->{@location 176}, @location 178:1->{@type 11}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $4 = LIST() at (179, 0)
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, $4->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer ($4, $3) = TUPLE($3, $4) at (180, 0)
  $4 = Set(@location 179) : Literal([])
  $3 = Set(@location 176) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, $4->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
  $4 = Set(@location 176) : typing.Iterator[builtins.int]
  $3 = Set(@location 179) : Literal([])
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 180:0->{@location 176}, @location 180:1->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Transfer $5 = NEXT $4 at (204, 0)
  $4 = Set(@location 176) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $4 = Set(@location 176) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer _ = $5 at (208, 0)
  $5 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $5 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, _->{@type 4}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6 = GLOBALS.list at (209, 0)
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $7 = GLOBALS.int at (210, 0)
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, $7->{@type 6}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6 = $6[$7] at (211, 0)
  $6 = Set(@type 5) : builtins.type[builtins.list]
  $7 = Set(@type 6) : builtins.type[builtins.int]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, $7->{@type 6}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $6 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
  $7 = Set(@type 6) : builtins.type[builtins.int]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 7}, $7->{@type 6}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int],@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $5 = $6() at (212, 0)
  $6 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 7}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $6 = Set(@type 7) : builtins.type[builtins.list[builtins.int]]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@type 7}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6 = $3.append at (213, 0)
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 179:*->{@location 212}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer $6($5) at (214, 0)
  $5 = Set(@location 212) : builtins.list[builtins.int]
  $6 = Set(@location 213) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),))
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 179:*->{@location 212}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $5 = Set(@location 212) : builtins.list[builtins.int]
  $6 = Set(@location 213) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),))
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 179:*->{@location 212}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Transfer clusters = $3 at (246, 0)
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer _ = $2 at (247, 0)
  $2 = Set(@type 11) : Literal(Ellipsis)
Prev: $1->{@location 22}, $2->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $2 = Set(@type 11) : Literal(Ellipsis)
Post: $1->{@location 22}, $2->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, _->{@type 11}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $3 = GLOBALS.range at (248, 0)
Prev: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
Post: $1->{@location 22}, $3->{@type 9}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $5 = GLOBALS.len at (249, 0)
Prev: $1->{@location 22}, $3->{@type 9}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
Post: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $6 = X at (250, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  X = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, $6->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $4 = $5($6) at (251, 0)
  $5 = Set(@type 13) : Overloaded(([](((0)x=(),) -> builtins.int),))
  $6 = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, $6->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $5 = Set(@type 13) : Overloaded(([](((0)x=(),) -> builtins.int),))
  $6 = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 9}, $4->{@type 4}, $5->{@type 13}, $6->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $2 = $3($4) at (252, 0)
  $4 = Set(@type 4) : builtins.int
  $3 = Set(@type 9) : builtins.type[builtins.range]
Prev: $1->{@location 22}, $3->{@type 9}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $4 = Set(@type 4) : builtins.int
  $3 = Set(@type 9) : builtins.type[builtins.range]
Post: $1->{@location 22}, $2->{@type 10}, $3->{@type 9}, $4->{@type 4}, @location 179:*->{@location 212}, @location 252:*->{@type 4}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $2 = ITER $2 at (253, 0)
  $2 = Set(@type 10) : builtins.range
Prev: $1->{@location 22}, $2->{@type 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
  $2 = Set(@location 253) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Transfer $3 = NEXT $2 at (292, 0)
  $2 = Set(@location 253) : typing.Iterator[builtins.int]
Prev: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $2 = Set(@location 253) : typing.Iterator[builtins.int]
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer sample_i = $3 at (296, 0)
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = GLOBALS.np at (297, 0)
Prev: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $3.linalg at (298, 0)
  $3 = Set(@type 0) : module numpy
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@type 14) : module linalg.linalg
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 14: module linalg.linalg,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = $3.norm at (299, 0)
  $3 = Set(@type 14) : module linalg.linalg
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 14: module linalg.linalg,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@type 14) : module linalg.linalg
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, $4->{@type 15}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 14: module linalg.linalg,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = X at (300, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  X = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $6 = sample_i at (301, 0)
  sample_i = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  sample_i = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = $5[$6] at (302, 0)
  $5 = Set(@param X) : numpy.ndarray
  $6 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 302) : numpy.ndarray
  $6 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $6 = centroids at (303, 0)
  centroids = Set(@location 10, @location 540) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  centroids = Set(@location 10, @location 540) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@location 10, @location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = $5 - $6 at (304, 0)
  $5 = Set(@location 302) : numpy.ndarray
  $6 = Set(@location 10, @location 540) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@location 10, @location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 304) : numpy.ndarray
  $6 = Set(@location 10, @location 540) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@location 10, @location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $6 = None at (305, 0)
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $7 = 1 at (306, 0)
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $4($5, $6, $7) at (307, 0)
  $5 = Set(@location 304) : numpy.ndarray
  $4 = Set(@type 15) : Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),))
  $7 = Set(@type 16) : Literal(1)
  $6 = Set(@type 12) : Literal(None)
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 304) : numpy.ndarray
  $4 = Set(@type 15) : Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),))
  $7 = Set(@type 16) : Literal(1)
  $6 = Set(@type 12) : Literal(None)
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 307: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = $3.argmin at (308, 0)
  $3 = Set(@location 307) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 307: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@location 307) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, $4->{@type 17}, @location 179:*->{@location 212}, @location 308:self->{@location 307}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 307: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $4() at (309, 0)
  $4 = Set(@type 17) : Overloaded(([](() -> builtins.int),))
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@type 17}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $4 = Set(@type 17) : Overloaded(([](() -> builtins.int),))
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, $4->{@type 17}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer r = $3 at (310, 0)
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = clusters at (311, 0)
  clusters = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  clusters = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = r at (312, 0)
  r = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  r = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $3[$4] at (313, 0)
  $4 = Set(@type 4) : builtins.int
  $3 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $4 = Set(@type 4) : builtins.int
  $3 = Set(@location 313) : builtins.list[builtins.int]
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 313}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = $3.append at (314, 0)
  $3 = Set(@location 313) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@location 313}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $3 = Set(@location 313) : builtins.list[builtins.int]
Post: $1->{@location 22}, $2->{@location 253}, $3->{@location 313}, $4->{@location 314}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = sample_i at (315, 0)
  sample_i = Set(@type 4) : builtins.int
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@location 314}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  sample_i = Set(@type 4) : builtins.int
Post: $1->{@location 22}, $2->{@location 253}, $4->{@location 314}, $5->{@type 4}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $4($5) at (316, 0)
  $5 = Set(@type 4) : builtins.int
  $4 = Set(@location 314) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),))
Prev: $1->{@location 22}, $2->{@location 253}, $4->{@location 314}, $5->{@type 4}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@type 4) : builtins.int
  $4 = Set(@location 314) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),))
Post: $1->{@location 22}, $2->{@location 253}, $3->{@type 12}, $4->{@location 314}, $5->{@type 4}, @location 179:*->{@location 212}, @location 313:*->{@type 4}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @location 313=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $2 = GLOBALS.np at (446, 0)
Prev: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $2->{@type 0}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $3 = $2.array at (447, 0)
  $2 = Set(@type 0) : module numpy
Prev: $1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $2 = Set(@type 0) : module numpy
Post: $1->{@location 22}, $2->{@type 0}, $3->{@type 18}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = clusters at (448, 0)
  clusters = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $3->{@type 18}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  clusters = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $4 = ITER $4 at (449, 0)
  $4 = Set(@location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $4 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $5 = cluster? at (450, 0)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, $5->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer ($5, $4) = TUPLE($4, $5) at (451, 0)
  $5 = Set(@type 11) : Literal(Ellipsis)
  $4 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, $5->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
  $4 = Set(@type 11) : Literal(Ellipsis)
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, @location 179:*->{@location 212}, @location 451:0->{@location 449}, @location 451:1->{@type 11}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $6 = LIST() at (452, 0)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, $6->{@location 452}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer ($6, $5) = TUPLE($5, $6) at (453, 0)
  $5 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
  $6 = Set(@location 452) : Literal([])
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, $6->{@location 452}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
  $5 = Set(@location 452) : Literal([])
  $6 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 453:0->{@location 449}, @location 453:1->{@location 452}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Transfer $7 = NEXT $6 at (490, 0)
  $6 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $6 = Set(@location 449) : typing.Iterator[builtins.list[builtins.int]]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer cluster = $7 at (494, 0)
  $7 = Set(@location 490) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 490) : builtins.list[builtins.int]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $7 = X at (495, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  X = Set(@param X) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8 = cluster at (496, 0)
  cluster = Set(@location 490) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  cluster = Set(@location 490) : builtins.list[builtins.int]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, $8->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $7 = $7[$8] at (497, 0)
  $7 = Set(@param X) : numpy.ndarray
  $8 = Set(@location 490) : builtins.list[builtins.int]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, $8->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 497) : numpy.ndarray
  $8 = Set(@location 490) : builtins.list[builtins.int]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, $8->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 497: numpy.ndarray,@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8 = $7.mean at (498, 0)
  $7 = Set(@location 497) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 497: numpy.ndarray,@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 497) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, $8->{@type 19}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 498:self->{@location 497}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 497: numpy.ndarray,@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $9 = 0 at (499, 0)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $7 = $8($9) at (500, 0)
  $9 = Set(@type 3) : Literal(0)
  $8 = Set(@type 19) : Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $9 = Set(@type 3) : Literal(0)
  $8 = Set(@type 19) : Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8 = $5.append at (501, 0)
  $5 = Set(@location 452) : builtins.list[numpy.ndarray]
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $5 = Set(@location 452) : builtins.list[numpy.ndarray]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $8($7) at (502, 0)
  $7 = Set(@location 500) : numpy.ndarray
  $8 = Set(@location 501) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),))
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $7 = Set(@location 500) : numpy.ndarray
  $8 = Set(@location 501) : Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),))
Post: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer ($5, $4) = TUPLE($4, $5) at (538, 0)
  $5 = Set(@location 452) : builtins.list[numpy.ndarray]
  $4 = Set(@type 11) : Literal(Ellipsis)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $5 = Set(@type 11) : Literal(Ellipsis)
  $4 = Set(@location 452) : builtins.list[numpy.ndarray]
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, $5->{@type 11}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 538:0->{@type 11}, @location 538:1->{@location 452}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer cluster = $5 at (539, 0)
  $5 = Set(@type 11) : Literal(Ellipsis)
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, $5->{@type 11}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $5 = Set(@type 11) : Literal(Ellipsis)
Post: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, $5->{@type 11}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@type 11}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer $2 = $3($4) at (540, 0)
  $4 = Set(@location 452) : builtins.list[numpy.ndarray]
  $3 = Set(@type 18) : Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
Prev: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $4 = Set(@location 452) : builtins.list[numpy.ndarray]
  $3 = Set(@type 18) : Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
Post: $1->{@location 22}, $2->{@location 540}, $3->{@type 18}, $4->{@location 452}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Transfer new_centroids = $2 at (541, 0)
  $2 = Set(@location 540) : numpy.ndarray
Prev: $1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
  $2 = Set(@location 540) : numpy.ndarray
Post: $1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $2 = GLOBALS.np at (542, 0)
Prev: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
Post: $1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $3 = $2.allclose at (543, 0)
  $2 = Set(@type 0) : module numpy
Prev: $1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $2 = Set(@type 0) : module numpy
Post: $1->{@location 22}, $2->{@type 0}, $3->{@type 20}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $4 = centroids at (544, 0)
  centroids = Set(@location 10, @location 540) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 20}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  centroids = Set(@location 10, @location 540) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 20}, $4->{@location 10, @location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $5 = new_centroids at (545, 0)
  new_centroids = Set(@location 540) : numpy.ndarray
Prev: $1->{@location 22}, $3->{@type 20}, $4->{@location 10, @location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  new_centroids = Set(@location 540) : numpy.ndarray
Post: $1->{@location 22}, $3->{@type 20}, $4->{@location 10, @location 540}, $5->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $2 = $3($4, $5) at (546, 0)
  $4 = Set(@location 10, @location 540) : numpy.ndarray
  $5 = Set(@location 540) : numpy.ndarray
  $3 = Set(@type 20) : Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
Prev: $1->{@location 22}, $3->{@type 20}, $4->{@location 10, @location 540}, $5->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $4 = Set(@location 10, @location 540) : numpy.ndarray
  $5 = Set(@location 540) : numpy.ndarray
  $3 = Set(@type 20) : Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
Post: $1->{@location 22}, $2->{@type 21}, $3->{@type 20}, $4->{@location 10, @location 540}, $5->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool))),@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $1 = GLOBALS.np at (610, 0)
Prev: $1->{@location 22}, $2->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
Post: $1->{@type 0}, $2->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $2 = $1.zeros at (611, 0)
  $1 = Set(@type 0) : module numpy
Prev: $1->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $1 = Set(@type 0) : module numpy
Post: $1->{@type 0}, $2->{@type 22}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $3 = X at (612, 0)
  X = Set(@param X) : numpy.ndarray
Prev: $2->{@type 22}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  X = Set(@param X) : numpy.ndarray
Post: $2->{@type 22}, $3->{@param X}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $3 = $3.shape at (613, 0)
  $3 = Set(@param X) : numpy.ndarray
Prev: $2->{@type 22}, $3->{@param X}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $3 = Set(@location 613) : builtins.list[builtins.int]
Post: $2->{@type 22}, $3->{@location 613}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 613: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $4 = 0 at (614, 0)
Prev: $2->{@type 22}, $3->{@location 613}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 613: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
Post: $2->{@type 22}, $3->{@location 613}, $4->{@type 3}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 613: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $3 = $3[$4] at (615, 0)
  $4 = Set(@type 3) : Literal(0)
  $3 = Set(@location 613) : builtins.list[builtins.int]
Prev: $2->{@type 22}, $3->{@location 613}, $4->{@type 3}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 613: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $4 = Set(@type 3) : Literal(0)
  $3 = Set(@type 4) : builtins.int
Post: $2->{@type 22}, $3->{@type 4}, $4->{@type 3}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 613: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray))),@type 3: Literal(0),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer $1 = $2($3) at (616, 0)
  $3 = Set(@type 4) : builtins.int
  $2 = Set(@type 22) : Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
Prev: $2->{@type 22}, $3->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray))),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $3 = Set(@type 4) : builtins.int
  $2 = Set(@type 22) : Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
Post: $1->{@location 616}, $2->{@type 22}, $3->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray))),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Transfer y_pred = $1 at (617, 0)
  $1 = Set(@location 616) : numpy.ndarray
Prev: $1->{@location 616}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
  $1 = Set(@location 616) : numpy.ndarray
Post: $1->{@location 616}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = GLOBALS.range at (618, 0)
Prev: @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
Post: $2->{@type 9}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $4 = GLOBALS.len at (619, 0)
Prev: $2->{@type 9}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
Post: $2->{@type 9}, $4->{@type 13}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $5 = clusters at (620, 0)
  clusters = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $2->{@type 9}, $4->{@type 13}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
  clusters = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
Post: $2->{@type 9}, $4->{@type 13}, $5->{@location 17, @location 179}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $3 = $4($5) at (621, 0)
  $5 = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
  $4 = Set(@type 13) : Overloaded(([](((0)x=(),) -> builtins.int),))
Prev: $2->{@type 9}, $4->{@type 13}, $5->{@location 17, @location 179}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
  $5 = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
  $4 = Set(@type 13) : Overloaded(([](((0)x=(),) -> builtins.int),))
Post: $2->{@type 9}, $3->{@type 4}, $4->{@type 13}, $5->{@location 17, @location 179}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $1 = $2($3) at (622, 0)
  $3 = Set(@type 4) : builtins.int
  $2 = Set(@type 9) : builtins.type[builtins.range]
Prev: $2->{@type 9}, $3->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
  $3 = Set(@type 4) : builtins.int
  $2 = Set(@type 9) : builtins.type[builtins.range]
Post: $1->{@type 10}, $2->{@type 9}, $3->{@type 4}, @location 179:*->{@location 212}, @location 622:*->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $1 = ITER $1 at (623, 0)
  $1 = Set(@type 10) : builtins.range
Prev: $1->{@type 10}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
  $1 = Set(@location 623) : typing.Iterator[builtins.int]
Post: $1->{@location 623}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = NEXT $1 at (718, 0)
  $1 = Set(@location 623) : typing.Iterator[builtins.int]
Prev: $1->{@location 623}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
  $1 = Set(@location 623) : typing.Iterator[builtins.int]
Post: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer cluster_i = $2 at (722, 0)
  $2 = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
  $2 = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = clusters at (723, 0)
  clusters = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 623}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  clusters = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 623}, $2->{@location 17, @location 179}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $3 = cluster_i at (724, 0)
  cluster_i = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 17, @location 179}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  cluster_i = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 17, @location 179}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = $2[$3] at (725, 0)
  $3 = Set(@type 4) : builtins.int
  $2 = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 623}, $2->{@location 17, @location 179}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $3 = Set(@type 4) : builtins.int
  $2 = Set(@location 725) : builtins.list[builtins.int]
Post: $1->{@location 623}, $2->{@location 725}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 725: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = ITER $2 at (726, 0)
  $2 = Set(@location 725) : builtins.list[builtins.int]
Prev: $1->{@location 623}, $2->{@location 725}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 725: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $2 = Set(@location 726) : typing.Iterator[builtins.int]
Post: $1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 725: builtins.list[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $3 = NEXT $2 at (734, 0)
  $2 = Set(@location 726) : typing.Iterator[builtins.int]
Prev: $1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $2 = Set(@location 726) : typing.Iterator[builtins.int]
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = NEXT $1 at (718, 0)
  $1 = Set(@location 623) : typing.Iterator[builtins.int]
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $1 = Set(@location 623) : typing.Iterator[builtins.int]
Post: $1->{@location 623}, $2->{@type 4}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer cluster_i = $2 at (722, 0)
  $2 = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $2 = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer sample_i = $3 at (738, 0)
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $3 = cluster_i at (739, 0)
  cluster_i = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  cluster_i = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $4 = y_pred at (740, 0)
  y_pred = Set(@location 616) : numpy.ndarray
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  y_pred = Set(@location 616) : numpy.ndarray
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $5 = sample_i at (741, 0)
  sample_i = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  sample_i = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, $5->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $6 = $4.__setitem__ at (742, 0)
  $4 = Set(@location 616) : numpy.ndarray
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, $5->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $4 = Set(@location 616) : numpy.ndarray
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, $5->{@type 4}, $6->{@location 742}, @location 179:*->{@location 212}, @location 742:self->{@location 616}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@location 742: Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None)))),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $6($5, $3) at (743, 0)
  $5 = Set(@type 4) : builtins.int
  $6 = Set(@location 742) : Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None))))
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $5->{@type 4}, $6->{@location 742}, @location 179:*->{@location 212}, @location 742:self->{@location 616}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@location 742: Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None)))),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $5 = Set(@type 4) : builtins.int
  $6 = Set(@location 742) : Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None))))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $5->{@type 4}, $6->{@location 742}, @location 179:*->{@location 212}, @location 742:self->{@location 616}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@location 742: Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None)))),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $3 = NEXT $2 at (734, 0)
  $2 = Set(@location 726) : typing.Iterator[builtins.int]
Prev: $1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $2 = Set(@location 726) : typing.Iterator[builtins.int]
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = NEXT $1 at (718, 0)
  $1 = Set(@location 623) : typing.Iterator[builtins.int]
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $1 = Set(@location 623) : typing.Iterator[builtins.int]
Post: $1->{@location 623}, $2->{@type 4}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer cluster_i = $2 at (722, 0)
  $2 = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $2 = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = clusters at (723, 0)
  clusters = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 623}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  clusters = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
Post: $1->{@location 623}, $2->{@location 17, @location 179}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $3 = cluster_i at (724, 0)
  cluster_i = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 17, @location 179}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  cluster_i = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 17, @location 179}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = $2[$3] at (725, 0)
  $3 = Set(@type 4) : builtins.int
  $2 = Set(@location 17, @location 179) : builtins.list[builtins.list[builtins.int]]
Prev: $1->{@location 623}, $2->{@location 17, @location 179}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $3 = Set(@type 4) : builtins.int
  $2 = Set(@location 725) : builtins.list[builtins.int]
Post: $1->{@location 623}, $2->{@location 725}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 725: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $2 = ITER $2 at (726, 0)
  $2 = Set(@location 725) : builtins.list[builtins.int]
Prev: $1->{@location 623}, $2->{@location 725}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 725: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $2 = Set(@location 726) : typing.Iterator[builtins.int]
Post: $1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 725: builtins.list[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer sample_i = $3 at (738, 0)
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $3 = cluster_i at (739, 0)
  cluster_i = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  cluster_i = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $4 = y_pred at (740, 0)
  y_pred = Set(@location 616) : numpy.ndarray
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  y_pred = Set(@location 616) : numpy.ndarray
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $5 = sample_i at (741, 0)
  sample_i = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  sample_i = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, $5->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $6 = $4.__setitem__ at (742, 0)
  $4 = Set(@location 616) : numpy.ndarray
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, $5->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $4 = Set(@location 616) : numpy.ndarray
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, $5->{@type 4}, $6->{@location 742}, @location 179:*->{@location 212}, @location 742:self->{@location 616}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@location 742: Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None)))),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $6($5, $3) at (743, 0)
  $5 = Set(@type 4) : builtins.int
  $6 = Set(@location 742) : Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None))))
  $3 = Set(@type 4) : builtins.int
Prev: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $5->{@type 4}, $6->{@location 742}, @location 179:*->{@location 212}, @location 742:self->{@location 616}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@location 742: Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None)))),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $5 = Set(@type 4) : builtins.int
  $6 = Set(@location 742) : Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None))))
  $3 = Set(@type 4) : builtins.int
Post: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $5->{@type 4}, $6->{@location 742}, @location 179:*->{@location 212}, @location 742:self->{@location 616}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@location 742: Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None)))),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer $1 = y_pred at (756, 0)
  y_pred = Set(@location 616) : numpy.ndarray
Prev: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  y_pred = Set(@location 616) : numpy.ndarray
Post: $1->{@location 616}, $2->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Transfer RETURN $1 at (757, 0)
  $1 = Set(@location 616) : numpy.ndarray
Prev: $1->{@location 616}
    Types: @location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 616=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
  $1 = Set(@location 616) : numpy.ndarray
Post: $1->{@location 616}, return->{@location 616}
    Types: @location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 616=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Pre:
	Liveness: Set(X, k, max_iterations)
	TypedPointer: X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map()
0 :
	0.0                   $1 = X
Post:
	Liveness:Set($1, X, k, max_iterations)
	TypedPointer:$1->{@param X}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1))

Successors: [1]

Pre:
	Liveness: Set($1, X, k, max_iterations)
	TypedPointer: $1->{@param X}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1))
1 :
	1.0                   $2 = GLOBALS.np
Post:
	Liveness:Set($1, $2, X, k, max_iterations)
	TypedPointer:$1->{@param X}, $2->{@type 0}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@scope locals=Set($1, $2))

Successors: [2]

Pre:
	Liveness: Set($1, $2, X, k, max_iterations)
	TypedPointer: $1->{@param X}, $2->{@type 0}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@scope locals=Set($1, $2))
2 :
	2.0                   $2 = $2.random
Post:
	Liveness:Set($1, $2, X, k, max_iterations)
	TypedPointer:$1->{@param X}, $2->{@type 1}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 1: module random.random
    Dirty: Map(@scope locals=Set($1, $2))

Successors: [3]

Pre:
	Liveness: Set($1, $2, X, k, max_iterations)
	TypedPointer: $1->{@param X}, $2->{@type 1}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 1: module random.random
    Dirty: Map(@scope locals=Set($1, $2))
3 :
	3.0                   $3 = $2.choice
Post:
	Liveness:Set($1, $3, X, k, max_iterations)
	TypedPointer:$1->{@param X}, $3->{@type 2}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3))

Successors: [4]

Pre:
	Liveness: Set($1, $3, X, k, max_iterations)
	TypedPointer: $1->{@param X}, $3->{@type 2}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3))
4 :
	4.0                   $4 = X
Post:
	Liveness:Set($1, $3, $4, X, k, max_iterations)
	TypedPointer:$1->{@param X}, $3->{@type 2}, $4->{@param X}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3, $4))

Successors: [5]

Pre:
	Liveness: Set($1, $3, $4, X, k, max_iterations)
	TypedPointer: $1->{@param X}, $3->{@type 2}, $4->{@param X}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3, $4))
5 :
	5.0                   $4 = $4.shape
Post:
	Liveness:Set($1, $3, $4, X, k, max_iterations)
	TypedPointer:$1->{@param X}, $3->{@type 2}, $4->{@location 5}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 5: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3, $4))

Successors: [6]

Pre:
	Liveness: Set($1, $3, $4, X, k, max_iterations)
	TypedPointer: $1->{@param X}, $3->{@type 2}, $4->{@location 5}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 5: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),))
    Dirty: Map(@scope locals=Set($1, $2, $3, $4))
6 :
	6.0                   $5 = 0
Post:
	Liveness:Set($1, $3, $4, $5, X, k, max_iterations)
	TypedPointer:$1->{@param X}, $3->{@type 2}, $4->{@location 5}, $5->{@type 3}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 5: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 3: Literal(0)
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Successors: [7]

Pre:
	Liveness: Set($1, $3, $4, $5, X, k, max_iterations)
	TypedPointer: $1->{@param X}, $3->{@type 2}, $4->{@location 5}, $5->{@type 3}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 5: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 3: Literal(0)
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
7 :
	7.0                   $4 = $4[$5]
Post:
	Liveness:Set($1, $3, $4, X, k, max_iterations)
	TypedPointer:$1->{@param X}, $3->{@type 2}, $4->{@type 4}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Successors: [8]

Pre:
	Liveness: Set($1, $3, $4, X, k, max_iterations)
	TypedPointer: $1->{@param X}, $3->{@type 2}, $4->{@type 4}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
8 :
	8.0                   $5 = k
Post:
	Liveness:Set($1, $3, $4, $5, X, k, max_iterations)
	TypedPointer:$1->{@param X}, $3->{@type 2}, $4->{@type 4}, $5->{@param k}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Successors: [9]

Pre:
	Liveness: Set($1, $3, $4, $5, X, k, max_iterations)
	TypedPointer: $1->{@param X}, $3->{@type 2}, $4->{@type 4}, $5->{@param k}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 2: Overloaded(([](((0)a={numpy.ndarray | builtins.int}, (1)size=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
9 :
	9.0                   $2 = $3($4, $5)
Post:
	Liveness:Set($1, $2, X, k, max_iterations)
	TypedPointer:$1->{@param X}, $2->{@location 9}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 9: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Successors: [10]

Pre:
	Liveness: Set($1, $2, X, k, max_iterations)
	TypedPointer: $1->{@param X}, $2->{@location 9}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 9: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
10 :
	10.0                  $1 = $1[$2]
Post:
	Liveness:Set($1, X, k, max_iterations)
	TypedPointer:$1->{@location 10}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))

Successors: [11]

Pre:
	Liveness: Set($1, X, k, max_iterations)
	TypedPointer: $1->{@location 10}, X->{@param X}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5))
11 :
	11.0                  centroids = $1
Post:
	Liveness:Set(X, centroids, k, max_iterations)
	TypedPointer:X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Successors: [12]

Pre:
	Liveness: Set(X, centroids, k, max_iterations)
	TypedPointer: X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
12 :
	12.0                  $2 = GLOBALS.list
Post:
	Liveness:Set($2, X, centroids, k, max_iterations)
	TypedPointer:$2->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Successors: [13]

Pre:
	Liveness: Set($2, X, centroids, k, max_iterations)
	TypedPointer: $2->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
13 :
	13.0                  $3 = GLOBALS.list
Post:
	Liveness:Set($2, $3, X, centroids, k, max_iterations)
	TypedPointer:$2->{@type 5}, $3->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Successors: [14]

Pre:
	Liveness: Set($2, $3, X, centroids, k, max_iterations)
	TypedPointer: $2->{@type 5}, $3->{@type 5}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
14 :
	14.0                  $4 = GLOBALS.int
Post:
	Liveness:Set($2, $3, $4, X, centroids, k, max_iterations)
	TypedPointer:$2->{@type 5}, $3->{@type 5}, $4->{@type 6}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Successors: [15]

Pre:
	Liveness: Set($2, $3, $4, X, centroids, k, max_iterations)
	TypedPointer: $2->{@type 5}, $3->{@type 5}, $4->{@type 6}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
15 :
	15.0                  $3 = $3[$4]
Post:
	Liveness:Set($2, $3, X, centroids, k, max_iterations)
	TypedPointer:$2->{@type 5}, $3->{@type 7}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list],@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Successors: [16]

Pre:
	Liveness: Set($2, $3, X, centroids, k, max_iterations)
	TypedPointer: $2->{@type 5}, $3->{@type 7}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 5: builtins.type[builtins.list],@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
16 :
	16.0                  $2 = $2[$3]
Post:
	Liveness:Set($2, X, centroids, k, max_iterations)
	TypedPointer:$2->{@type 8}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 8: builtins.type[builtins.list[builtins.list[builtins.int]]]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Successors: [17]

Pre:
	Liveness: Set($2, X, centroids, k, max_iterations)
	TypedPointer: $2->{@type 8}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 8: builtins.type[builtins.list[builtins.list[builtins.int]]]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
17 :
	17.0                  $1 = $2()
Post:
	Liveness:Set($1, X, centroids, k, max_iterations)
	TypedPointer:$1->{@location 17}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))

Successors: [18]

Pre:
	Liveness: Set($1, X, centroids, k, max_iterations)
	TypedPointer: $1->{@location 17}, X->{@param X}, centroids->{@location 10}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids))
18 :
	18.0                  clusters = $1
Post:
	Liveness:Set(X, centroids, clusters, k, max_iterations)
	TypedPointer:X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Successors: [19]

Pre:
	Liveness: Set(X, centroids, clusters, k, max_iterations)
	TypedPointer: X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))
19 :
	19.0                  $2 = GLOBALS.range
Post:
	Liveness:Set($2, X, centroids, clusters, k, max_iterations)
	TypedPointer:$2->{@type 9}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Successors: [20]

Pre:
	Liveness: Set($2, X, centroids, clusters, k, max_iterations)
	TypedPointer: $2->{@type 9}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}, max_iterations->{@param max_iterations}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))
20 :
	20.0                  $3 = max_iterations
Post:
	Liveness:Set($2, $3, X, centroids, clusters, k)
	TypedPointer:$2->{@type 9}, $3->{@param max_iterations}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Successors: [21]

Pre:
	Liveness: Set($2, $3, X, centroids, clusters, k)
	TypedPointer: $2->{@type 9}, $3->{@param max_iterations}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))
21 :
	21.0                  $1 = $2($3)
Post:
	Liveness:Set($1, X, centroids, clusters, k)
	TypedPointer:$1->{@type 10}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Successors: [22]

Pre:
	Liveness: Set($1, X, centroids, clusters, k)
	TypedPointer: $1->{@type 10}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))
22 :
	22.0                  $1 = ITER $1
Post:
	Liveness:Set($1, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, X->{@param X}, centroids->{@location 10}, clusters->{@location 17}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 17: builtins.list[builtins.list[builtins.int]],@location 22: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, centroids, clusters))

Successors: [168]

Pre:
	Liveness: Set($1, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, centroids, cluster, clusters, i, new_centroids, r, sample_i))
168 :
	168.0                 $2 = next($1) HANDLE: GOTO 608
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2))

Successors: [610, 172]

Pre:
	Liveness: Set($1, $2, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2))
172 :
	172.0                 i = $2
Post:
	Liveness:Set($1, X, centroids, k)
	TypedPointer:$1->{@location 22}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, i))

Successors: [173]

Pre:
	Liveness: Set($1, X, centroids, k)
	TypedPointer: $1->{@location 22}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, i))
173 :
	173.0                 $3 = GLOBALS.range
Post:
	Liveness:Set($1, $3, X, centroids, k)
	TypedPointer:$1->{@location 22}, $3->{@type 9}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, i))

Successors: [174]

Pre:
	Liveness: Set($1, $3, X, centroids, k)
	TypedPointer: $1->{@location 22}, $3->{@type 9}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, i))
174 :
	174.0                 $4 = k
Post:
	Liveness:Set($1, $3, $4, X, centroids, k)
	TypedPointer:$1->{@location 22}, $3->{@type 9}, $4->{@param k}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Successors: [175]

Pre:
	Liveness: Set($1, $3, $4, X, centroids, k)
	TypedPointer: $1->{@location 22}, $3->{@type 9}, $4->{@param k}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
175 :
	175.0                 $2 = $3($4)
Post:
	Liveness:Set($1, $2, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 10}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Successors: [176]

Pre:
	Liveness: Set($1, $2, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 10}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
176 :
	176.0                 $2 = ITER $2
Post:
	Liveness:Set($1, $2, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@location 176}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Successors: [177]

Pre:
	Liveness: Set($1, $2, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@location 176}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
177 :
	177.0                 $3 = _?
Post:
	Liveness:Set($1, $2, $3, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@location 176}, $3->{@type 11}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Successors: [178]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@location 176}, $3->{@type 11}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
178 :
	178.0                 ($3, $2) = TUPLE($2, $3)
Post:
	Liveness:Set($1, $2, $3, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 176}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Successors: [179]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
179 :
	179.0                 $4 = LIST()
Post:
	Liveness:Set($1, $2, $3, $4, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 176}, $4->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Successors: [180]

Pre:
	Liveness: Set($1, $2, $3, $4, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 176}, $4->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))
180 :
	180.0                 ($4, $3) = TUPLE($3, $4)
Post:
	Liveness:Set($1, $2, $3, $4, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: Literal([]),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 22=Set(TOP), @scope locals=Set($2, $3, $4, i))

Successors: [204]

Pre:
	Liveness: Set($1, $2, $3, $4, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
204 :
	204.0                 $5 = next($4) HANDLE: GOTO 246
Post:
	Liveness:Set($1, $2, $3, $4, $5, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Successors: [208, 246]

Pre:
	Liveness: Set($1, $2, $3, $4, $5, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
208 :
	208.0                 _ = $5
Post:
	Liveness:Set($1, $2, $3, $4, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Successors: [209]

Pre:
	Liveness: Set($1, $2, $3, $4, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
209 :
	209.0                 $6 = GLOBALS.list
Post:
	Liveness:Set($1, $2, $3, $4, $6, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Successors: [210]

Pre:
	Liveness: Set($1, $2, $3, $4, $6, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
210 :
	210.0                 $7 = GLOBALS.int
Post:
	Liveness:Set($1, $2, $3, $4, $6, $7, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, $7->{@type 6}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Successors: [211]

Pre:
	Liveness: Set($1, $2, $3, $4, $6, $7, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 5}, $7->{@type 6}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 5: builtins.type[builtins.list],@type 6: builtins.type[builtins.int]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
211 :
	211.0                 $6 = $6[$7]
Post:
	Liveness:Set($1, $2, $3, $4, $6, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 7}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Successors: [212]

Pre:
	Liveness: Set($1, $2, $3, $4, $6, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $6->{@type 7}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 7: builtins.type[builtins.list[builtins.int]]
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
212 :
	212.0                 $5 = $6()
Post:
	Liveness:Set($1, $2, $3, $4, $5, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Successors: [213]

Pre:
	Liveness: Set($1, $2, $3, $4, $5, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
213 :
	213.0                 $6 = $3.append
Post:
	Liveness:Set($1, $2, $3, $4, $5, $6, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 179:*->{@location 212}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Successors: [214]

Pre:
	Liveness: Set($1, $2, $3, $4, $5, $6, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@location 212}, $6->{@location 213}, @location 179:*->{@location 212}, @location 213:self->{@location 179}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 213: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{builtins.list[builtins.int] | Q}], (Literal(1),))}@Literal(None)),)),@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
214 :
	214.0                 $6($5)
Post:
	Liveness:Set($1, $2, $3, $4, X, centroids, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))

Successors: [204]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, $3->{@location 179}, $4->{@location 176}, $5->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 176: typing.Iterator[builtins.int],@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 4: builtins.int
    Dirty: Map(@location 176=Set(TOP), @location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, i))
246 :
	246.0                 clusters = $3
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Successors: [247]

Pre:
	Liveness: Set($1, $2, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $2->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
247 :
	247.0                 _ = $2
Post:
	Liveness:Set($1, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Successors: [248]

Pre:
	Liveness: Set($1, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
248 :
	248.0                 $3 = GLOBALS.range
Post:
	Liveness:Set($1, $3, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 9}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Successors: [249]

Pre:
	Liveness: Set($1, $3, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 9}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
249 :
	249.0                 $5 = GLOBALS.len
Post:
	Liveness:Set($1, $3, $5, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 9}, $5->{@type 13}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Successors: [250]

Pre:
	Liveness: Set($1, $3, $5, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
250 :
	250.0                 $6 = X
Post:
	Liveness:Set($1, $3, $5, $6, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 9}, $5->{@type 13}, $6->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Successors: [251]

Pre:
	Liveness: Set($1, $3, $5, $6, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 9}, $5->{@type 13}, $6->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
251 :
	251.0                 $4 = $5($6)
Post:
	Liveness:Set($1, $3, $4, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 9}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Successors: [252]

Pre:
	Liveness: Set($1, $3, $4, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 9}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
252 :
	252.0                 $2 = $3($4)
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@type 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Successors: [253]

Pre:
	Liveness: Set($1, $2, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $2->{@type 10}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))
253 :
	253.0                 $2 = ITER $2
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i))

Successors: [292]

Pre:
	Liveness: Set($1, $2, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
292 :
	292.0                 $3 = next($2) HANDLE: GOTO 446
Post:
	Liveness:Set($1, $2, $3, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [296, 446]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
296 :
	296.0                 sample_i = $3
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [297]

Pre:
	Liveness: Set($1, $2, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
297 :
	297.0                 $3 = GLOBALS.np
Post:
	Liveness:Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $3->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [298]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $3->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
298 :
	298.0                 $3 = $3.linalg
Post:
	Liveness:Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $3->{@type 14}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 14: module linalg.linalg,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [299]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $3->{@type 14}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 14: module linalg.linalg,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
299 :
	299.0                 $4 = $3.norm
Post:
	Liveness:Set($1, $2, $4, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@type 15}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [300]

Pre:
	Liveness: Set($1, $2, $4, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
300 :
	300.0                 $5 = X
Post:
	Liveness:Set($1, $2, $4, $5, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [301]

Pre:
	Liveness: Set($1, $2, $4, $5, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
301 :
	301.0                 $6 = sample_i
Post:
	Liveness:Set($1, $2, $4, $5, $6, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [302]

Pre:
	Liveness: Set($1, $2, $4, $5, $6, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@param X}, $6->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
302 :
	302.0                 $5 = $5[$6]
Post:
	Liveness:Set($1, $2, $4, $5, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [303]

Pre:
	Liveness: Set($1, $2, $4, $5, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
303 :
	303.0                 $6 = centroids
Post:
	Liveness:Set($1, $2, $4, $5, $6, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@location 10, @location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [304]

Pre:
	Liveness: Set($1, $2, $4, $5, $6, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 302}, $6->{@location 10, @location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 302: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
304 :
	304.0                 $5 = $5 - $6
Post:
	Liveness:Set($1, $2, $4, $5, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [305]

Pre:
	Liveness: Set($1, $2, $4, $5, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
305 :
	305.0                 $6 = None
Post:
	Liveness:Set($1, $2, $4, $5, $6, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [306]

Pre:
	Liveness: Set($1, $2, $4, $5, $6, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
306 :
	306.0                 $7 = 1
Post:
	Liveness:Set($1, $2, $4, $5, $6, $7, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [307]

Pre:
	Liveness: Set($1, $2, $4, $5, $6, $7, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@type 15}, $5->{@location 304}, $6->{@type 12}, $7->{@type 16}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 304: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 12: Literal(None),@type 15: Overloaded(([](((0)a=numpy.ndarray, (1)ord=Literal(None), (2)axis=builtins.int) -> new numpy.ndarray),)),@type 16: Literal(1),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
307 :
	307.0                 $3 = $4($5, $6, $7)
Post:
	Liveness:Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $3->{@location 307}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 307: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [308]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $3->{@location 307}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 307: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
308 :
	308.0                 $4 = $3.argmin
Post:
	Liveness:Set($1, $2, $4, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@type 17}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [309]

Pre:
	Liveness: Set($1, $2, $4, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@type 17}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 17: Overloaded(([](() -> builtins.int),)),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
309 :
	309.0                 $3 = $4()
Post:
	Liveness:Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [310]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
310 :
	310.0                 r = $3
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k, r, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [311]

Pre:
	Liveness: Set($1, $2, X, centroids, clusters, k, r, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
311 :
	311.0                 $3 = clusters
Post:
	Liveness:Set($1, $2, $3, X, centroids, clusters, k, r, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $3->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [312]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, clusters, k, r, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, r->{@type 4}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
312 :
	312.0                 $4 = r
Post:
	Liveness:Set($1, $2, $3, $4, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $3->{@location 179}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [313]

Pre:
	Liveness: Set($1, $2, $3, $4, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $3->{@location 179}, $4->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
313 :
	313.0                 $3 = $3[$4]
Post:
	Liveness:Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $3->{@location 313}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [314]

Pre:
	Liveness: Set($1, $2, $3, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $3->{@location 313}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
314 :
	314.0                 $4 = $3.append
Post:
	Liveness:Set($1, $2, $4, X, centroids, clusters, k, sample_i)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@location 314}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [315]

Pre:
	Liveness: Set($1, $2, $4, X, centroids, clusters, k, sample_i)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@location 314}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, sample_i->{@type 4}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
315 :
	315.0                 $5 = sample_i
Post:
	Liveness:Set($1, $2, $4, $5, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, $4->{@location 314}, $5->{@type 4}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [316]

Pre:
	Liveness: Set($1, $2, $4, $5, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $4->{@location 314}, $5->{@type 4}, @location 179:*->{@location 212}, @location 314:self->{@location 313}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 313: builtins.list[builtins.int],@location 314: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | builtins.int}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
316 :
	316.0                 $3 = $4($5)
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@location 253}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [292]

Pre:
	Liveness: Set($1, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $2->{@location 253}, $3->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 253: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 253=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
446 :
	446.0                 $2 = GLOBALS.np
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [447]

Pre:
	Liveness: Set($1, $2, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
447 :
	447.0                 $3 = $2.array
Post:
	Liveness:Set($1, $3, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [448]

Pre:
	Liveness: Set($1, $3, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
448 :
	448.0                 $4 = clusters
Post:
	Liveness:Set($1, $3, $4, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [449]

Pre:
	Liveness: Set($1, $3, $4, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@location 179}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
449 :
	449.0                 $4 = ITER $4
Post:
	Liveness:Set($1, $3, $4, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [450]

Pre:
	Liveness: Set($1, $3, $4, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
450 :
	450.0                 $5 = cluster?
Post:
	Liveness:Set($1, $3, $4, $5, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@location 449}, $5->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [451]

Pre:
	Liveness: Set($1, $3, $4, $5, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@location 449}, $5->{@type 11}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
451 :
	451.0                 ($5, $4) = TUPLE($4, $5)
Post:
	Liveness:Set($1, $3, $4, $5, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [452]

Pre:
	Liveness: Set($1, $3, $4, $5, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
452 :
	452.0                 $6 = LIST()
Post:
	Liveness:Set($1, $3, $4, $5, $6, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, $6->{@location 452}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [453]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 449}, $6->{@location 452}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))
453 :
	453.0                 ($6, $5) = TUPLE($5, $6)
Post:
	Liveness:Set($1, $3, $4, $5, $6, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: Literal([]),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, _, clusters, i, r, sample_i))

Successors: [490]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
490 :
	490.0                 $7 = next($6) HANDLE: GOTO 538
Post:
	Liveness:Set($1, $3, $4, $5, $6, $7, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [494, 538]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, $7, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
494 :
	494.0                 cluster = $7
Post:
	Liveness:Set($1, $3, $4, $5, $6, X, centroids, cluster, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [495]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, X, centroids, cluster, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
495 :
	495.0                 $7 = X
Post:
	Liveness:Set($1, $3, $4, $5, $6, $7, X, centroids, cluster, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [496]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, $7, X, centroids, cluster, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, cluster->{@location 490}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
496 :
	496.0                 $8 = cluster
Post:
	Liveness:Set($1, $3, $4, $5, $6, $7, $8, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, $8->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [497]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, $7, $8, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@param X}, $8->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
497 :
	497.0                 $7 = $7[$8]
Post:
	Liveness:Set($1, $3, $4, $5, $6, $7, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 497: numpy.ndarray,@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [498]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, $7, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 497}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 497: numpy.ndarray,@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
498 :
	498.0                 $8 = $7.mean
Post:
	Liveness:Set($1, $3, $4, $5, $6, $8, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [499]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, $8, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
499 :
	499.0                 $9 = 0
Post:
	Liveness:Set($1, $3, $4, $5, $6, $8, $9, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [500]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, $8, $9, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $8->{@type 19}, $9->{@type 3}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray))),@type 19: Overloaded(([](() -> new numpy.ndarray), [](((0)axis=builtins.int,) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
500 :
	500.0                 $7 = $8($9)
Post:
	Liveness:Set($1, $3, $4, $5, $6, $7, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [501]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, $7, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
501 :
	501.0                 $8 = $5.append
Post:
	Liveness:Set($1, $3, $4, $5, $6, $7, $8, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [502]

Pre:
	Liveness: Set($1, $3, $4, $5, $6, $7, $8, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 500}, $8->{@location 501}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, @location 501:self->{@location 452}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 501: Overloaded(([Q](((0)x=Q,) -> {update (builtins.list[{Q | numpy.ndarray}], (Literal(1),))}@Literal(None)),)),@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
502 :
	502.0                 $8($7)
Post:
	Liveness:Set($1, $3, $4, $5, $6, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [490]

Pre:
	Liveness: Set($1, $3, $4, $5, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@type 11}, $5->{@location 452}, $6->{@location 449}, $7->{@location 490}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 449: typing.Iterator[builtins.list[builtins.int]],@location 452: builtins.list[numpy.ndarray],@location 490: builtins.list[builtins.int],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 449=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
538 :
	538.0                 ($5, $4) = TUPLE($4, $5)
Post:
	Liveness:Set($1, $3, $4, $5, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@location 452}, $5->{@type 11}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [539]

Pre:
	Liveness: Set($1, $3, $4, $5, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, $5->{@type 11}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 11: Literal(Ellipsis),@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
539 :
	539.0                 cluster = $5
Post:
	Liveness:Set($1, $3, $4, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $3->{@type 18}, $4->{@location 452}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [540]

Pre:
	Liveness: Set($1, $3, $4, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $3->{@type 18}, $4->{@location 452}, @location 179:*->{@location 212}, @location 452:*->{@location 500}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 452: builtins.list[numpy.ndarray],@location 500: numpy.ndarray,@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 18: Overloaded(([](((0)object=(), (1)dtype=()) -> new numpy.ndarray), [](((0)object=(),) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @location 452=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
540 :
	540.0                 $2 = $3($4)
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))

Successors: [541]

Pre:
	Liveness: Set($1, $2, X, centroids, clusters, k)
	TypedPointer: $1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, r, sample_i))
541 :
	541.0                 new_centroids = $2
Post:
	Liveness:Set($1, X, centroids, clusters, k, new_centroids)
	TypedPointer:$1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [542]

Pre:
	Liveness: Set($1, X, centroids, clusters, k, new_centroids)
	TypedPointer: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
542 :
	542.0                 $2 = GLOBALS.np
Post:
	Liveness:Set($1, $2, X, centroids, clusters, k, new_centroids)
	TypedPointer:$1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [543]

Pre:
	Liveness: Set($1, $2, X, centroids, clusters, k, new_centroids)
	TypedPointer: $1->{@location 22}, $2->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
543 :
	543.0                 $3 = $2.allclose
Post:
	Liveness:Set($1, $3, X, centroids, clusters, k, new_centroids)
	TypedPointer:$1->{@location 22}, $3->{@type 20}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [544]

Pre:
	Liveness: Set($1, $3, X, centroids, clusters, k, new_centroids)
	TypedPointer: $1->{@location 22}, $3->{@type 20}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
544 :
	544.0                 $4 = centroids
Post:
	Liveness:Set($1, $3, $4, X, clusters, k, new_centroids)
	TypedPointer:$1->{@location 22}, $3->{@type 20}, $4->{@location 10, @location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [545]

Pre:
	Liveness: Set($1, $3, $4, X, clusters, k, new_centroids)
	TypedPointer: $1->{@location 22}, $3->{@type 20}, $4->{@location 10, @location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
545 :
	545.0                 $5 = new_centroids
Post:
	Liveness:Set($1, $3, $4, $5, X, clusters, k, new_centroids)
	TypedPointer:$1->{@location 22}, $3->{@type 20}, $4->{@location 10, @location 540}, $5->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [546]

Pre:
	Liveness: Set($1, $3, $4, $5, X, clusters, k, new_centroids)
	TypedPointer: $1->{@location 22}, $3->{@type 20}, $4->{@location 10, @location 540}, $5->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 20: Overloaded(([](((0)a=numpy.ndarray, (1)b=numpy.ndarray) -> builtins.bool), [](((0)a=numpy.ndarray, (1)b=numpy.ndarray, (2)rtol=builtins.float, (3)atol=builtins.float) -> builtins.bool)))
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
546 :
	546.0                 $2 = $3($4, $5)
Post:
	Liveness:Set($1, $2, X, clusters, k, new_centroids)
	TypedPointer:$1->{@location 22}, $2->{@type 21}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [547]

Pre:
	Liveness: Set($1, $2, X, clusters, k, new_centroids)
	TypedPointer: $1->{@location 22}, $2->{@type 21}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
547 :
	547.0                 $2 = NOT $2
Post:
	Liveness:Set($1, $2, X, clusters, k, new_centroids)
	TypedPointer:$1->{@location 22}, $2->{@type 21}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [548]

Pre:
	Liveness: Set($1, $2, X, clusters, k, new_centroids)
	TypedPointer: $1->{@location 22}, $2->{@type 21}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 21: builtins.bool
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
548 :
	548.0                 IF $2 GOTO 602
Post:
	Liveness:Set($1, X, clusters, k, new_centroids)
	TypedPointer:$1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [602, 610]

Pre:
	Liveness: Set($1, X, clusters, k, new_centroids)
	TypedPointer: $1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
602 :
	602.0                 $2 = new_centroids
Post:
	Liveness:Set($1, $2, X, clusters, k)
	TypedPointer:$1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [603]

Pre:
	Liveness: Set($1, $2, X, clusters, k)
	TypedPointer: $1->{@location 22}, $2->{@location 540}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 179}, k->{@param k}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
603 :
	603.0                 centroids = $2
Post:
	Liveness:Set($1, X, centroids, clusters, k)
	TypedPointer:$1->{@location 22}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 540}, clusters->{@location 179}, k->{@param k}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, centroids, cluster, clusters, i, new_centroids, r, sample_i))

Dirty Locals: centroids

Successors: [168]

Pre:
	Liveness: Set(X, clusters)
	TypedPointer: $1->{@location 22}, $2->{@type 4}, @location 179:*->{@location 212}, X->{@param X}, centroids->{@location 10, @location 540}, clusters->{@location 17, @location 179}, k->{@param k}, new_centroids->{@location 540}
    Types: @location 10: numpy.ndarray,@location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 22: typing.Iterator[builtins.int],@location 540: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 22=Set(TOP), @scope locals=Set($2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
610 :
	610.0                 $1 = GLOBALS.np
Post:
	Liveness:Set($1, X, clusters)
	TypedPointer:$1->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [611]

Pre:
	Liveness: Set($1, X, clusters)
	TypedPointer: $1->{@type 0}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 0: module numpy
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
611 :
	611.0                 $2 = $1.zeros
Post:
	Liveness:Set($2, X, clusters)
	TypedPointer:$2->{@type 22}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [612]

Pre:
	Liveness: Set($2, X, clusters)
	TypedPointer: $2->{@type 22}, @location 179:*->{@location 212}, X->{@param X}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
612 :
	612.0                 $3 = X
Post:
	Liveness:Set($2, $3, clusters)
	TypedPointer:$2->{@type 22}, $3->{@param X}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [613]

Pre:
	Liveness: Set($2, $3, clusters)
	TypedPointer: $2->{@type 22}, $3->{@param X}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
613 :
	613.0                 $3 = $3.shape
Post:
	Liveness:Set($2, $3, clusters)
	TypedPointer:$2->{@type 22}, $3->{@location 613}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 613: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [614]

Pre:
	Liveness: Set($2, $3, clusters)
	TypedPointer: $2->{@type 22}, $3->{@location 613}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 613: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray)))
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
614 :
	614.0                 $4 = 0
Post:
	Liveness:Set($2, $3, $4, clusters)
	TypedPointer:$2->{@type 22}, $3->{@location 613}, $4->{@type 3}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 613: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [615]

Pre:
	Liveness: Set($2, $3, $4, clusters)
	TypedPointer: $2->{@type 22}, $3->{@location 613}, $4->{@type 3}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 613: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray))),@type 3: Literal(0)
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
615 :
	615.0                 $3 = $3[$4]
Post:
	Liveness:Set($2, $3, clusters)
	TypedPointer:$2->{@type 22}, $3->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray))),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [616]

Pre:
	Liveness: Set($2, $3, clusters)
	TypedPointer: $2->{@type 22}, $3->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 22: Overloaded(([](((0)dims={builtins.tuple | builtins.int}, (1)type=()) -> new numpy.ndarray), [](((0)dims={builtins.tuple | builtins.int},) -> new numpy.ndarray))),@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
616 :
	616.0                 $1 = $2($3)
Post:
	Liveness:Set($1, clusters)
	TypedPointer:$1->{@location 616}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))

Successors: [617]

Pre:
	Liveness: Set($1, clusters)
	TypedPointer: $1->{@location 616}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i))
617 :
	617.0                 y_pred = $1
Post:
	Liveness:Set(clusters, y_pred)
	TypedPointer:@location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [618]

Pre:
	Liveness: Set(clusters, y_pred)
	TypedPointer: @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
618 :
	618.0                 $2 = GLOBALS.range
Post:
	Liveness:Set($2, clusters, y_pred)
	TypedPointer:$2->{@type 9}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [619]

Pre:
	Liveness: Set($2, clusters, y_pred)
	TypedPointer: $2->{@type 9}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
619 :
	619.0                 $4 = GLOBALS.len
Post:
	Liveness:Set($2, $4, clusters, y_pred)
	TypedPointer:$2->{@type 9}, $4->{@type 13}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [620]

Pre:
	Liveness: Set($2, $4, clusters, y_pred)
	TypedPointer: $2->{@type 9}, $4->{@type 13}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
620 :
	620.0                 $5 = clusters
Post:
	Liveness:Set($2, $4, $5, clusters, y_pred)
	TypedPointer:$2->{@type 9}, $4->{@type 13}, $5->{@location 17, @location 179}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [621]

Pre:
	Liveness: Set($2, $4, $5, clusters, y_pred)
	TypedPointer: $2->{@type 9}, $4->{@type 13}, $5->{@location 17, @location 179}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 13: Overloaded(([](((0)x=(),) -> builtins.int),)),@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
621 :
	621.0                 $3 = $4($5)
Post:
	Liveness:Set($2, $3, clusters, y_pred)
	TypedPointer:$2->{@type 9}, $3->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [622]

Pre:
	Liveness: Set($2, $3, clusters, y_pred)
	TypedPointer: $2->{@type 9}, $3->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int,@type 9: builtins.type[builtins.range]
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
622 :
	622.0                 $1 = $2($3)
Post:
	Liveness:Set($1, clusters, y_pred)
	TypedPointer:$1->{@type 10}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [623]

Pre:
	Liveness: Set($1, clusters, y_pred)
	TypedPointer: $1->{@type 10}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 10: builtins.range
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))
623 :
	623.0                 $1 = ITER $1
Post:
	Liveness:Set($1, clusters, y_pred)
	TypedPointer:$1->{@location 623}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 179=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [718]

Pre:
	Liveness: Set($1, clusters, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
718 :
	718.0                 $2 = next($1) HANDLE: GOTO 756
Post:
	Liveness:Set($1, $2, clusters, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [756, 722]

Pre:
	Liveness: Set($1, $2, clusters, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
722 :
	722.0                 cluster_i = $2
Post:
	Liveness:Set($1, cluster_i, clusters, y_pred)
	TypedPointer:$1->{@location 623}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [723]

Pre:
	Liveness: Set($1, cluster_i, clusters, y_pred)
	TypedPointer: $1->{@location 623}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
723 :
	723.0                 $2 = clusters
Post:
	Liveness:Set($1, $2, cluster_i, clusters, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 17, @location 179}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [724]

Pre:
	Liveness: Set($1, $2, cluster_i, clusters, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 17, @location 179}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
724 :
	724.0                 $3 = cluster_i
Post:
	Liveness:Set($1, $2, $3, cluster_i, clusters, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 17, @location 179}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [725]

Pre:
	Liveness: Set($1, $2, $3, cluster_i, clusters, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 17, @location 179}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
725 :
	725.0                 $2 = $2[$3]
Post:
	Liveness:Set($1, $2, cluster_i, clusters, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 725}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 725: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [726]

Pre:
	Liveness: Set($1, $2, cluster_i, clusters, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 725}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 725: builtins.list[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
726 :
	726.0                 $2 = ITER $2
Post:
	Liveness:Set($1, $2, cluster_i, clusters, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [734]

Pre:
	Liveness: Set($1, $2, cluster_i, clusters, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
734 :
	734.0                 $3 = next($2) HANDLE: GOTO 752
Post:
	Liveness:Set($1, $2, $3, cluster_i, clusters, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [738, 718]

Pre:
	Liveness: Set($1, $2, $3, cluster_i, clusters, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
738 :
	738.0                 sample_i = $3
Post:
	Liveness:Set($1, $2, cluster_i, clusters, sample_i, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [739]

Pre:
	Liveness: Set($1, $2, cluster_i, clusters, sample_i, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
739 :
	739.0                 $3 = cluster_i
Post:
	Liveness:Set($1, $2, $3, cluster_i, clusters, sample_i, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [740]

Pre:
	Liveness: Set($1, $2, $3, cluster_i, clusters, sample_i, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
740 :
	740.0                 $4 = y_pred
Post:
	Liveness:Set($1, $2, $3, $4, cluster_i, clusters, sample_i, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [741]

Pre:
	Liveness: Set($1, $2, $3, $4, cluster_i, clusters, sample_i, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, sample_i->{@type 4}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
741 :
	741.0                 $5 = sample_i
Post:
	Liveness:Set($1, $2, $3, $4, $5, cluster_i, clusters, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, $5->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [742]

Pre:
	Liveness: Set($1, $2, $3, $4, $5, cluster_i, clusters, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $4->{@location 616}, $5->{@type 4}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
742 :
	742.0                 $6 = $4.__setitem__
Post:
	Liveness:Set($1, $2, $3, $5, $6, cluster_i, clusters, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $5->{@type 4}, $6->{@location 742}, @location 179:*->{@location 212}, @location 742:self->{@location 616}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@location 742: Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None)))),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [743]

Pre:
	Liveness: Set($1, $2, $3, $5, $6, cluster_i, clusters, y_pred)
	TypedPointer: $1->{@location 623}, $2->{@location 726}, $3->{@type 4}, $5->{@type 4}, $6->{@location 742}, @location 179:*->{@location 212}, @location 742:self->{@location 616}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@location 742: Overloaded(([](((0)key=builtins.int, (1)value=builtins.float) -> {update (numpy.ndarray, ())}@Literal(None)), [*Args](((0)key=(), (1)value=()) -> {update (numpy.ndarray, ())}@Literal(None)), [](((0)key=builtins.int, (1)value=builtins.int) -> {update (numpy.ndarray, ())}@Literal(None)))),@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
743 :
	743.0                 $6($5, $3)
Post:
	Liveness:Set($1, $2, cluster_i, clusters, y_pred)
	TypedPointer:$1->{@location 623}, $2->{@location 726}, @location 179:*->{@location 212}, cluster_i->{@type 4}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@location 726: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @location 726=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [734]

Pre:
	Liveness: Set(y_pred)
	TypedPointer: $1->{@location 623}, $2->{@type 4}, @location 179:*->{@location 212}, clusters->{@location 17, @location 179}, y_pred->{@location 616}
    Types: @location 179: builtins.list[builtins.list[builtins.int]],@location 17: builtins.list[builtins.list[builtins.int]],@location 212: builtins.list[builtins.int],@location 616: numpy.ndarray,@location 623: typing.Iterator[builtins.int],@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int,@type 4: builtins.int
    Dirty: Map(@location 179=Set(TOP), @location 616=Set(TOP), @location 623=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
756 :
	756.0                 $1 = y_pred
Post:
	Liveness:Set($1)
	TypedPointer:$1->{@location 616}
    Types: @location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 616=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [757]

Pre:
	Liveness: Set($1)
	TypedPointer: $1->{@location 616}
    Types: @location 616: numpy.ndarray,@param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@location 616=Set(TOP), @scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))
757 :
	757.0                 RETURN $1
Post:
	Liveness:Set()
	TypedPointer:
    Types: @param X: numpy.ndarray,@param k: builtins.int,@param max_iterations: builtins.int
    Dirty: Map(@scope locals=Set($1, $2, $3, $4, $5, $6, $7, $8, $9, _, cluster, cluster_i, clusters, i, new_centroids, r, sample_i, y_pred))

Successors: [inf]

Dirty map:
 {'run': {22: {'centroids'}}}
from checkpoint import persist
import numpy as np
import sklearn.datasets

np.random.seed(42)


def run(X: np.ndarray, k: int, max_iterations: int) -> np.ndarray:
    """A simple clustering method that forms k clusters by iteratively reassigning
    samples to the closest centroids and after that moves the centroids to the center
    of the newly formed clusters. Do K-Means clustering and return cluster indices
    @param X: np.ndarray
        The dataset to cluster, where each row is a sample and each column is a feature.
    @param k: int
        The number of clusters the algorithm will form.
    @param max_iterations: int
        The number of iterations the algorithm will run for if it does
        not converge before that.
    """
    centroids = X[np.random.choice(X.shape[0], k)]
    clusters = list[list[int]]()
    with persist.Loader(__file__, locals()) as transaction:
        if transaction:
            [centroids] = transaction.move()
        for i in transaction.iterate(range(max_iterations)):  # type: int
            clusters = [list[int]() for _ in range(k)]
            for sample_i in range(len(X)):
                r = np.linalg.norm(X[sample_i] - centroids, None, 1).argmin()
                clusters[r].append(sample_i)
            new_centroids = np.array([X[cluster].mean(0) for cluster in clusters])
            if np.allclose(centroids, new_centroids):
                break
            centroids = new_centroids
            transaction.commit(centroids)
    y_pred = np.zeros(X.shape[0])
    for cluster_i in range(len(clusters)):
        for sample_i in clusters[cluster_i]:
            y_pred[sample_i] = cluster_i
    return y_pred


def compute_random(n_samples: int, k: int, plot: bool) -> None:
    X, y = sklearn.datasets.make_blobs(
        n_samples=n_samples, n_features=2, centers=k, cluster_std=1.8, shuffle=True
    )
    y_pred = run(X, k=k, max_iterations=1000)
    if plot:
        import matplotlib.pyplot as plt

        plt.scatter(X[:, 0], X[:, 1], c=y_pred)
        plt.show()
    else:
        print("Done.")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("samples", type=int)
    parser.add_argument("k", type=int)
    parser.add_argument("--plot", action="store_true")
    args = parser.parse_args()
    compute_random(args.samples, args.k, args.plot)

